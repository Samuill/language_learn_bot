# -*- coding: utf-8 -*-
import telebot
import pandas as pd
import random
import os
import time
import requests
from googletrans import Translator
import json
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from telebot.types import Message

TOKEN = "7616425414:AAFaZCuYss9UyNSXm_MJCd42rLjAKNWy0Mc"
bot = telebot.TeleBot(TOKEN)
translator = Translator()
scheduler = BackgroundScheduler()
user_state = {}


def start_activity(chat_id, mode):
    """–ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
    clear_state(chat_id)
    track_activity(chat_id)
    
    df = get_dataframe(chat_id)
    if df is None or df.empty:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
        return False
    
    if mode == 'repeat':
        return start_repetition(chat_id, df)
    elif mode == 'learn':
        return start_learning(chat_id, df)
    return False

def clear_state(chat_id):
    if chat_id in user_state:
        if "message_id" in user_state[chat_id]:
            try:
                bot.delete_message(chat_id, user_state[chat_id]["message_id"])
            except:
                pass
        del user_state[chat_id]

def get_user_params_path(chat_id):
    return f"params_{chat_id}.json"

def update_streak(chat_id):
    params_path = get_user_params_path(chat_id)
    
    try:
        with open(params_path, 'r') as f:
            params = json.load(f)
    except FileNotFoundError:
        params = {'streak': 0, 'last_active': None}
        
    today = datetime.now().date().isoformat()
    last_active = datetime.fromisoformat(params['last_active']).date() if params['last_active'] else None
    
    if last_active:
        delta = (datetime.now().date() - last_active).days
        if delta == 1:
            params['streak'] += 1
        elif delta > 1:
            params['streak'] = 1
    else:
        params['streak'] = 1
        
    params['last_active'] = today
    with open(params_path, 'w') as f:
        json.dump(params, f)
    return params['streak']

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def send_streak_info(chat_id):
    params_path = get_user_params_path(chat_id)
    try:
        with open(params_path, 'r') as f:
            params = json.load(f)
        streak = params.get('streak', 0)
        last_active = params.get('last_active', '–Ω—ñ–∫–æ–ª–∏')
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ streak
        bot.send_message(
            chat_id,
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å!"
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç—ñ–∫–µ—Ä
        try:
            with open(f'fires/{streak}.webp', 'rb') as sticker_file:
                bot.send_sticker(chat_id, sticker_file)
        except FileNotFoundError:
            print(f"–°—Ç—ñ–∫–µ—Ä –¥–ª—è streak {streak} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ç–≤–æ—Ä—é—î–º–æ "—Ñ–µ–π–∫–æ–≤–∏–π" –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É repeat_words
        class FakeMessage:
            def __init__(self, chat_id):
                self.chat = FakeChat(chat_id)
        
        class FakeChat:
            def __init__(self, chat_id):
                self.id = chat_id
        
        fake_msg = FakeMessage(chat_id)
        
        try:
            repeat_words(fake_msg)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑ —ñ–º—ñ—Ç–æ–≤–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}")
        
    except FileNotFoundError:
        update_streak(chat_id)
        send_streak_info(chat_id)


def send_reminder():
    for filename in os.listdir():
        if filename.startswith("params_") and filename.endswith(".json"):
            chat_id = filename.split('_')[1].split('.')[0]
            try:
                send_streak_info(chat_id)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {chat_id}: {e}")

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∞—Å–æ–º
scheduler.add_job(send_reminder, 'cron', hour=random.randint(10,22), minute=random.randint(0,59))
scheduler.start()

# –î–æ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è streak –ø—Ä–∏ –±—É–¥—å-—è–∫—ñ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
def track_activity(chat_id):
    params_path = get_user_params_path(chat_id)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if not os.path.exists(params_path):
        update_streak(chat_id)
        
    return update_streak(chat_id)

def update_streak(chat_id):
    params_path = get_user_params_path(chat_id)
    
    try:
        with open(params_path, 'r') as f:
            params = json.load(f)
    except FileNotFoundError:
        params = {'streak': 0, 'last_active': None}
        
    today = datetime.now().date().isoformat()
    last_active = datetime.fromisoformat(params['last_active']).date() if params['last_active'] else None
    
    if last_active:
        delta = (datetime.now().date() - last_active).days
        if delta == 1:
            params['streak'] += 1
        elif delta > 1:
            params['streak'] = 1
    else:
        params['streak'] = 1
        
    params['last_active'] = today
    with open(params_path, 'w') as f:
        json.dump(params, f)
    return params['streak']


def get_user_file_path(chat_id):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    ru_file = f"ru_words_{chat_id}.csv"
    uk_file = f"uk_words_{chat_id}.csv"
    
    if os.path.exists(ru_file):
        return ru_file, "ru"
    elif os.path.exists(uk_file):
        return uk_file, "uk"
    else:
        return None, None

def clear_state(chat_id):
    if chat_id in user_state:
        if "message_id" in user_state[chat_id]:
            try:
                bot.delete_message(chat_id, user_state[chat_id]["message_id"])
            except:
                pass
        del user_state[chat_id]

def get_dataframe(chat_id):
    file_path, _ = get_user_file_path(chat_id)
    if not file_path:
        return None
    return pd.read_csv(file_path, encoding='utf-8-sig')

def save_dataframe(chat_id, df, language):
    file_path = f"{language}_words_{chat_id}.csv"
    df.to_csv(file_path, index=False, encoding='utf-8-sig')

def main_menu_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
    return keyboard

def main_menu_cancel():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–í—ñ–¥–º—ñ–Ω–∞")
    return keyboard

def language_selection_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞")
    return keyboard

@bot.message_handler(commands=["start"])
def main_menu(message):
    clear_state(message.chat.id)
    file_path, language = get_user_file_path(message.chat.id)
    track_activity(message.chat.id)  # –î–æ–¥–∞–Ω–æ —Ü–µ–π —Ä—è–¥–æ–∫
    
    if not file_path:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É
        bot.send_message(message.chat.id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", reply_markup=language_selection_keyboard())
        user_state[message.chat.id] = {"step": "language_selection"}
    else:
        # –Ø–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: message.text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"])
def handle_language_selection(message):
    chat_id = message.chat.id
    if user_state.get(chat_id, {}).get("step") == "language_selection":
        language = "uk" if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "ru"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        df = pd.DataFrame(columns=["word", "translation", "priority"])
        save_dataframe(chat_id, df, language)
        
        bot.send_message(chat_id, f"‚úÖ –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–±—Ä–∞–Ω–æ: {message.text}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏–≤—á–∞—Ç–∏ —ó—Ö.", reply_markup=main_menu_keyboard())
        clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
def add_word(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:", reply_markup=main_menu_cancel())
    user_state[message.chat.id] = {"step": "adding_word"}

@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–º—ñ–Ω–∞")
def cancel_action(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard())

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "adding_word")
def handle_translation(message):
    if not message.text or message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç–æ–º!")
        return
        
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
        
    word = message.text.strip()
    file_path, language = get_user_file_path(message.chat.id)
    if not file_path:
        bot.send_message(message.chat.id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    translation = translator.translate(word, src="de", dest=language).text
    
    if translation:
        user_state[message.chat.id] = {
            "step": "confirm_translation",
            "word": word,
            "auto_translation": translation
        }
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–¢–∞–∫", "–ù—ñ","–í—ñ–¥–º—ñ–Ω–∞")
        bot.send_message(message.chat.id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {translation}. –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "confirm_translation")
def handle_confirmation(message):
    if message.text == "–¢–∞–∫":
        save_word(message.chat.id)
        bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu_keyboard())
    elif message.text == "–ù—ñ":
        # –í–∏–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ (–≤–æ–Ω–∞ —Ç—É—Ç –Ω–µ–¥–æ—Ä–µ—á–Ω–∞)
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É:", reply_markup=telebot.types.ReplyKeyboardRemove())
        user_state[message.chat.id]["step"] = "manual_translation"
    elif message.text == "–í—ñ–¥–º—ñ–Ω–∞":
        clear_state(message.chat.id)
        bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–í—ñ–¥–º—ñ–Ω–∞'.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "manual_translation")
def handle_manual_translation(message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return  # –î–æ–¥–∞—î–º–æ return, —â–æ–± –Ω–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞–≤ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É
    
    save_word(message.chat.id, message.text.strip())
    bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º!", reply_markup=main_menu_keyboard())

def save_word(chat_id, translation=None):
    file_path, language = get_user_file_path(chat_id)
    if not file_path:
        bot.send_message(chat_id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    df = get_dataframe(chat_id)
    if df is None:  # –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ None
        df = pd.DataFrame(columns=["word", "translation", "priority"])
    data = user_state[chat_id]
    translation = translation or data["auto_translation"]
    
    new_row = pd.DataFrame({
        "word": [data["word"]],
        "translation": [translation],
        "priority": [0.0]
    })
    
    if not new_row.empty:
        df = pd.concat([df, new_row], ignore_index=True)
        save_dataframe(chat_id, df, language)
    clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞")
def learn_words(message):
    clear_state(message.chat.id)
    streak = track_activity(message.chat.id)
    df = get_dataframe(message.chat.id)
    
    if df is None or df.empty:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
        return
    
    df = df.sort_values(by="priority", ascending=False)
    words = df.sample(min(10, len(df)))
    
    translations = words['translation'].tolist()
    de_words = words['word'].tolist()
    random.shuffle(translations)
    random.shuffle(de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(translations, de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    user_state[message.chat.id] = {
        "pairs": list(zip(words['translation'], words['word'])),
        "selected_tr": None,
        "message_id": None
    }
    
    sent_message = bot.send_message(message.chat.id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[message.chat.id]["message_id"] = sent_message.message_id

@bot.callback_query_handler(func=lambda call: call.data.startswith(('tr_', 'de_')))
def handle_pairs(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state or "pairs" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞'")
        return
    
    state = user_state[chat_id]
    
    if call.data.startswith('tr_'):
        if state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚è≥ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
        state['selected_tr'] = call.data[3:]
        bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ: {state['selected_tr']}")
    
    elif call.data.startswith('de_'):
        if not state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥")
            return
        
        selected_de = call.data[3:]
        correct = any(tr == state['selected_tr'] and de == selected_de for tr, de in state["pairs"])
        
        df = get_dataframe(chat_id)
        if correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            df.loc[df['translation'] == state['selected_tr'], 'priority'] -= 0.001
            markup = call.message.reply_markup
            for row in markup.keyboard:
                for btn in row:
                    if btn.callback_data in [f'tr_{state["selected_tr"]}', f'de_{selected_de}']:
                        btn.text += " ‚úÖ"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            
            if "found_pairs" not in state:
                state["found_pairs"] = []
            state["found_pairs"].append((state['selected_tr'], selected_de))
            
            if len(state["found_pairs"]) == len(state["pairs"]):
                bot.delete_message(chat_id, call.message.message_id)
                learn_words(call.message)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            df.loc[df['translation'] == state['selected_tr'], 'priority'] += 0.001
        
        save_dataframe(chat_id, df, get_user_file_path(chat_id)[1])
        state['selected_tr'] = None

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
def repeat_words(message):
    clear_state(message.chat.id)
    streak = track_activity(message.chat.id)
    df = get_dataframe(message.chat.id)
    
    if df is None or df.empty:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
        return
    
    word = df.sample(1).iloc[0]
    sample_size = min(3, len(df))
    translations = df['translation'].sample(sample_size).tolist()
    if word['translation'] not in translations:
        translations[0] = word['translation']
    random.shuffle(translations)
    
    markup = telebot.types.InlineKeyboardMarkup()
    for tr in translations:
        markup.add(telebot.types.InlineKeyboardButton(
            tr, 
            callback_data=f"ans_{word['word']}_{tr}"
        ))
    
    sent_message = bot.send_message(message.chat.id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {word['word']}", reply_markup=markup)
    user_state[message.chat.id] = {
        "current_word": word,
        "message_id": sent_message.message_id
    }

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏'")
        return
    
    _, word, selected_tr = call.data.split('_')
    correct_tr = user_state[chat_id]["current_word"]['translation']
    
    df = get_dataframe(chat_id)
    if selected_tr == correct_tr:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        df.loc[df['word'] == word, 'priority'] -= 0.001
        bot.delete_message(chat_id, call.message.message_id)
        repeat_words(call.message)
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tr}")
        df.loc[df['word'] == word, 'priority'] += 0.001
        markup = call.message.reply_markup
        for row in markup.keyboard:
            if row[0].callback_data == call.data:
                row[0].text += " ‚ùå"
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
    
    save_dataframe(chat_id, df, get_user_file_path(chat_id)[1])


# @bot.message_handler(commands=['fire'])
# def test_fire(message):
#     if message.from_user.id == YOUR_ADMIN_ID:  # –î–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π ID
#         send_reminder()
#         bot.reply_to(message, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# @bot.message_handler(commands=['stop'])
# def stop_bot(message):
#     if message.from_user.id == YOUR_ADMIN_ID:
#         bot.stop_polling()
#         scheduler.shutdown()
#         os._exit(0)




@bot.message_handler(commands=['fire'])
def test_fire(message):
    if message.from_user.id == 476376623:
        try:
            send_reminder()
            bot.reply_to(message, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ /fire: {e}")
            bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
@bot.message_handler(commands=['stop'])
def stop_bot(message):
    if message.from_user.id == 476376623:
        bot.stop_polling()
        scheduler.shutdown(wait=False)  # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
        exit(0)

if __name__ == '__main__':
    if not scheduler.running:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—ñ–Ω —â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π
        scheduler.start()
    
    while True:
        try:
            bot.polling(none_stop=True, interval=1)
        except requests.exceptions.ConnectionError:
            print("–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(5)
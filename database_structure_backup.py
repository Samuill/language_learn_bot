#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î —É JSON —Ñ–∞–π–ª —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–∏
"""

import os
import sys
import json
import sqlite3
import datetime
from pathlib import Path

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    import db_manager
    print("‚úÖ Successfully imported db_manager")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

class DatabaseStructureManager:
    def __init__(self, backup_dir="database_backups"):
        self.backup_dir = Path(backup_dir)
        self.backup_dir.mkdir(exist_ok=True)
        self.db_path = db_manager.DB_PATH
        
    def get_database_structure(self):
        """–û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        structure = {
            "timestamp": datetime.datetime.now().isoformat(),
            "database_path": self.db_path,
            "tables": {},
            "indexes": [],
            "views": [],
            "triggers": []
        }
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
            tables = [row[0] for row in cursor.fetchall()]
            
            print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü—å")
            
            for table_name in tables:
                print(f"  üìä –û–±—Ä–æ–±–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ: {table_name}")
                table_info = self._get_table_structure(cursor, table_name)
                structure["tables"][table_name] = table_info
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
            cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='index' AND name NOT LIKE 'sqlite_autoindex%'")
            for name, sql in cursor.fetchall():
                structure["indexes"].append({"name": name, "sql": sql})
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è (views)
            cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='view'")
            for name, sql in cursor.fetchall():
                structure["views"].append({"name": name, "sql": sql})
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∏–≥–µ—Ä–∏
            cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='trigger'")
            for name, sql in cursor.fetchall():
                structure["triggers"].append({"name": name, "sql": sql})
            
            conn.close()
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–∞")
            return structure
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î: {e}")
            return None
    
    def _get_table_structure(self, cursor, table_name):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—é"""
        table_info = {
            "columns": [],
            "row_count": 0,
            "sample_data": [],
            "foreign_keys": [],
            "create_sql": ""
        }
        
        try:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–ª–æ–Ω–∫–∏
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns_info = cursor.fetchall()
            
            for col_info in columns_info:
                column = {
                    "cid": col_info[0],
                    "name": col_info[1],
                    "type": col_info[2],
                    "notnull": bool(col_info[3]),
                    "default_value": col_info[4],
                    "pk": bool(col_info[5])
                }
                table_info["columns"].append(column)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            table_info["row_count"] = cursor.fetchone()[0]
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—ñ 3 —Ä—è–¥–∫–∏ —è–∫ –ø—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö
            if table_info["row_count"] > 0:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                sample_rows = cursor.fetchall()
                
                # –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–∫–∏ –≤ —Å–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ JSON
                column_names = [col["name"] for col in table_info["columns"]]
                for row in sample_rows:
                    row_dict = {}
                    for i, value in enumerate(row):
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è JSON
                        if isinstance(value, bytes):
                            row_dict[column_names[i]] = "<binary_data>"
                        elif value is None:
                            row_dict[column_names[i]] = None
                        else:
                            row_dict[column_names[i]] = str(value)
                    table_info["sample_data"].append(row_dict)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ
            cursor.execute(f"PRAGMA foreign_key_list({table_name})")
            fk_info = cursor.fetchall()
            for fk in fk_info:
                foreign_key = {
                    "id": fk[0],
                    "seq": fk[1],
                    "table": fk[2],
                    "from": fk[3],
                    "to": fk[4],
                    "on_update": fk[5],
                    "on_delete": fk[6],
                    "match": fk[7]
                }
                table_info["foreign_keys"].append(foreign_key)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ SQL —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
            create_sql_result = cursor.fetchone()
            if create_sql_result:
                table_info["create_sql"] = create_sql_result[0]
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ {table_name}: {e}")
            table_info["error"] = str(e)
        
        return table_info
    
    def save_structure_to_file(self, structure, filename=None):
        """–ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É JSON —Ñ–∞–π–ª"""
        if not structure:
            print("‚ùå –ù–µ–º–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return None
        
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"db_structure_{timestamp}.json"
        
        filepath = self.backup_dir / filename
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(structure, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª: {filepath}")
            return filepath
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
            return None
    
    def load_structure_from_file(self, filepath):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ JSON —Ñ–∞–π–ª—É"""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                structure = json.load(f)
            print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ —Ñ–∞–π–ª—É: {filepath}")
            return structure
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
            return None
    
    def compare_structures(self, old_structure, new_structure):
        """–ü–æ—Ä—ñ–≤–Ω—é—î –¥–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("\nüîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä –±–∞–∑ –¥–∞–Ω–∏—Ö...")
        
        differences = {
            "timestamp_old": old_structure.get("timestamp", "Unknown"),
            "timestamp_new": new_structure.get("timestamp", "Unknown"),
            "tables_added": [],
            "tables_removed": [],
            "tables_modified": {},
            "indexes_changed": [],
            "views_changed": [],
            "triggers_changed": []
        }
        
        old_tables = set(old_structure.get("tables", {}).keys())
        new_tables = set(new_structure.get("tables", {}).keys())
        
        # –ù–æ–≤—ñ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        differences["tables_added"] = list(new_tables - old_tables)
        differences["tables_removed"] = list(old_tables - new_tables)
        
        # –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        common_tables = old_tables & new_tables
        for table_name in common_tables:
            table_diff = self._compare_table_structure(
                old_structure["tables"][table_name],
                new_structure["tables"][table_name]
            )
            if table_diff:
                differences["tables_modified"][table_name] = table_diff
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤
        old_indexes = {idx["name"]: idx["sql"] for idx in old_structure.get("indexes", [])}
        new_indexes = {idx["name"]: idx["sql"] for idx in new_structure.get("indexes", [])}
        
        for name, sql in new_indexes.items():
            if name not in old_indexes:
                differences["indexes_changed"].append({"action": "added", "name": name, "sql": sql})
            elif old_indexes[name] != sql:
                differences["indexes_changed"].append({"action": "modified", "name": name, "old_sql": old_indexes[name], "new_sql": sql})
        
        for name in old_indexes:
            if name not in new_indexes:
                differences["indexes_changed"].append({"action": "removed", "name": name})
        
        return differences
    
    def _compare_table_structure(self, old_table, new_table):
        """–ü–æ—Ä—ñ–≤–Ω—é—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–≤–æ—Ö —Ç–∞–±–ª–∏—Ü—å"""
        differences = {}
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫
        old_columns = {col["name"]: col for col in old_table.get("columns", [])}
        new_columns = {col["name"]: col for col in new_table.get("columns", [])}
        
        added_columns = set(new_columns.keys()) - set(old_columns.keys())
        removed_columns = set(old_columns.keys()) - set(new_columns.keys())
        
        if added_columns:
            differences["columns_added"] = list(added_columns)
        if removed_columns:
            differences["columns_removed"] = list(removed_columns)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        modified_columns = {}
        for col_name in set(old_columns.keys()) & set(new_columns.keys()):
            old_col = old_columns[col_name]
            new_col = new_columns[col_name]
            
            col_diff = {}
            if old_col["type"] != new_col["type"]:
                col_diff["type"] = {"old": old_col["type"], "new": new_col["type"]}
            if old_col["notnull"] != new_col["notnull"]:
                col_diff["notnull"] = {"old": old_col["notnull"], "new": new_col["notnull"]}
            if old_col["default_value"] != new_col["default_value"]:
                col_diff["default_value"] = {"old": old_col["default_value"], "new": new_col["default_value"]}
            if old_col["pk"] != new_col["pk"]:
                col_diff["primary_key"] = {"old": old_col["pk"], "new": new_col["pk"]}
            
            if col_diff:
                modified_columns[col_name] = col_diff
        
        if modified_columns:
            differences["columns_modified"] = modified_columns
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤
        old_count = old_table.get("row_count", 0)
        new_count = new_table.get("row_count", 0)
        if old_count != new_count:
            differences["row_count_changed"] = {"old": old_count, "new": new_count, "difference": new_count - old_count}
        
        # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∫–ª—é—á—ñ–≤
        old_fks = old_table.get("foreign_keys", [])
        new_fks = new_table.get("foreign_keys", [])
        if old_fks != new_fks:
            differences["foreign_keys_changed"] = {"old": old_fks, "new": new_fks}
        
        return differences if differences else None
    
    def print_comparison_report(self, differences):
        """–í–∏–≤–æ–¥–∏—Ç—å –∑–≤—ñ—Ç –ø—Ä–æ —Ä—ñ–∑–Ω–∏—Ü—ñ"""
        print("\n" + "="*60)
        print("üìä –ó–í–Ü–¢ –ü–†–û –ó–ú–Ü–ù–ò –°–¢–†–£–ö–¢–£–†–ò –ë–ê–ó–ò –î–ê–ù–ò–•")
        print("="*60)
        
        print(f"üïê –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {differences['timestamp_old']}")
        print(f"üïê –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {differences['timestamp_new']}")
        
        # –¢–∞–±–ª–∏—Ü—ñ
        if differences["tables_added"]:
            print(f"\n‚úÖ –î–æ–¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ ({len(differences['tables_added'])}):")
            for table in differences["tables_added"]:
                print(f"  + {table}")
        
        if differences["tables_removed"]:
            print(f"\n‚ùå –í–∏–¥–∞–ª–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ ({len(differences['tables_removed'])}):")
            for table in differences["tables_removed"]:
                print(f"  - {table}")
        
        if differences["tables_modified"]:
            print(f"\nüîÑ –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ ({len(differences['tables_modified'])}):")
            for table_name, table_diff in differences["tables_modified"].items():
                print(f"  üìù {table_name}:")
                
                if "columns_added" in table_diff:
                    print(f"    ‚úÖ –î–æ–¥–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(table_diff['columns_added'])}")
                if "columns_removed" in table_diff:
                    print(f"    ‚ùå –í–∏–¥–∞–ª–µ–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(table_diff['columns_removed'])}")
                if "columns_modified" in table_diff:
                    print(f"    üîÑ –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏:")
                    for col_name, col_changes in table_diff["columns_modified"].items():
                        print(f"      - {col_name}: {col_changes}")
                if "row_count_changed" in table_diff:
                    rc = table_diff["row_count_changed"]
                    print(f"    üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {rc['old']} ‚Üí {rc['new']} ({rc['difference']:+d})")
        
        # –Ü–Ω–¥–µ–∫—Å–∏
        if differences["indexes_changed"]:
            print(f"\nüîç –ó–º—ñ–Ω–∏ —ñ–Ω–¥–µ–∫—Å—ñ–≤ ({len(differences['indexes_changed'])}):")
            for idx_change in differences["indexes_changed"]:
                action = idx_change["action"]
                name = idx_change["name"]
                if action == "added":
                    print(f"  ‚úÖ –î–æ–¥–∞–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: {name}")
                elif action == "removed":
                    print(f"  ‚ùå –í–∏–¥–∞–ª–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: {name}")
                elif action == "modified":
                    print(f"  üîÑ –ú–æ–¥–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —ñ–Ω–¥–µ–∫—Å: {name}")
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        total_changes = (len(differences["tables_added"]) + 
                        len(differences["tables_removed"]) + 
                        len(differences["tables_modified"]) + 
                        len(differences["indexes_changed"]))
        
        if total_changes == 0:
            print("\nüéâ –ó–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ –∑–º—ñ–Ω–∏–ª–∞—Å—å.")
        else:
            print(f"\nüìà –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω: {total_changes}")
        
        print("="*60)
    
    def create_backup(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–∏–π –±–µ–∫–∞–ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        print("üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∫–∞–ø—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        structure = self.get_database_structure()
        if not structure:
            return None
        
        filepath = self.save_structure_to_file(structure)
        return filepath
    
    def compare_with_latest(self, current_filepath=None):
        """–ü–æ—Ä—ñ–≤–Ω—é—î –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –æ—Å—Ç–∞–Ω–Ω—ñ–º –±–µ–∫–∞–ø–æ–º"""
        # –ó–Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø
        backup_files = list(self.backup_dir.glob("db_structure_*.json"))
        if not backup_files:
            print("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –±–µ–∫–∞–ø—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
            return None
        
        latest_backup = max(backup_files, key=lambda x: x.stat().st_mtime)
        print(f"üìÅ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø: {latest_backup}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        old_structure = self.load_structure_from_file(latest_backup)
        if not old_structure:
            return None
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if current_filepath:
            new_structure = self.load_structure_from_file(current_filepath)
        else:
            new_structure = self.get_database_structure()
        
        if not new_structure:
            return None
        
        # –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        differences = self.compare_structures(old_structure, new_structure)
        self.print_comparison_report(differences)
        
        return differences

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üóÑÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    print("="*50)
    
    manager = DatabaseStructureManager()
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –±–µ–∫–∞–ø
    backup_filepath = manager.create_backup()
    if not backup_filepath:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø")
        return
    
    print(f"\nüìÑ –ë–µ–∫–∞–ø —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_filepath}")
    
    # –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –±–µ–∫–∞–ø–æ–º (—è–∫—â–æ —ñ—Å–Ω—É—î)
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –±–µ–∫–∞–ø–æ–º...")
    differences = manager.compare_with_latest(backup_filepath)
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if backup_filepath.exists():
        file_size = backup_filepath.stat().st_size
        print(f"\nüìä –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –±–µ–∫–∞–ø—É: {file_size:,} –±–∞–π—Ç")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        structure = manager.load_structure_from_file(backup_filepath)
        if structure:
            tables_count = len(structure.get("tables", {}))
            total_rows = sum(table.get("row_count", 0) for table in structure["tables"].values())
            indexes_count = len(structure.get("indexes", []))
            
            print(f"üìã –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –¢–∞–±–ª–∏—Ü—å: {tables_count}")
            print(f"  ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤: {total_rows:,}")
            print(f"  ‚Ä¢ –Ü–Ω–¥–µ–∫—Å—ñ–≤: {indexes_count}")
            print(f"  ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—å: {len(structure.get('views', []))}")
            print(f"  ‚Ä¢ –¢—Ä–∏–≥–µ—Ä—ñ–≤: {len(structure.get('triggers', []))}")

if __name__ == "__main__":
    main()

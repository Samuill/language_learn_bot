# -*- coding: utf-8 -*-
from config import user_state, bot, ADMIN_ID
from utils import clear_state, main_menu_keyboard
import db_manager
from german_article_finder import find_german_article  # –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç –Ω–æ–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó
import pandas as pd  # Add missing import for pandas

def save_word(chat_id, manual_translation=None):
    """Save word to user dictionary"""
    if chat_id not in user_state:
        return False
    
    state = user_state[chat_id]
    if "word" not in state:
        return False
    
    word = state["word"]
    
    # Determine which translation to use
    translation = manual_translation if manual_translation else state.get("auto_translation", "")
    
    # Determine dictionary type
    dict_type = state.get("dict_type", "personal")
    if dict_type == "common" and chat_id != ADMIN_ID:
        return False
    
    if dict_type == "personal":
        from storage import get_dataframe, save_dataframe, get_user_file_path
        
        file_path, language = get_user_file_path(chat_id)
        try:
            df = get_dataframe(chat_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ DataFrame
            if 'word' not in df.columns:
                df['word'] = ""
            if 'translation' not in df.columns:
                df['translation'] = ""
            if 'priority' not in df.columns:
                df['priority'] = 0.0
            
            # Check if word already exists
            if not df[df['word'] == word].empty:
                return False
            
            # Add new word
            df.loc[len(df)] = {
                'word': word, 
                'translation': translation, 
                'priority': 0.0
            }
            
            save_dataframe(chat_id, df, language)
            return True
        except Exception as e:
            print(f"Error saving word to personal dictionary: {e}")
            return False
    
    # –ü–æ—à—É–∫ –∞—Ä—Ç–∏–∫–ª—è —É –±–∞–∑—ñ –Ω—ñ–º–µ—Ü—å–∫–∏—Ö —Å–ª—ñ–≤
    article, clean_word = find_german_article(word)
    print(f"Debug: Article finder returned article='{article}', clean_word='{clean_word}' for '{word}'")
    
    # –Ø–∫—â–æ –∞—Ä—Ç–∏–∫–ª—å –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ —ñ –æ—á–∏—â–µ–Ω–µ —Å–ª–æ–≤–æ
    if article:
        print(f"Found article '{article}' for word '{word}' -> '{clean_word}'")
        word_to_save = clean_word  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ª–æ–≤–æ –±–µ–∑ –∞—Ä—Ç–∏–∫–ª—è
        article_to_save = article  # –û–∫—Ä–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä—Ç–∏–∫–ª—å
    else:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞—Ä—Ç–∏–∫–ª—å –∑—ñ —Å–ª–æ–≤–∞ (—è–∫—â–æ —î)
        import re
        article_match = re.match(r'^(der|die|das)\s+(.+)$', word, re.IGNORECASE)
        if article_match:
            article_to_save = article_match.group(1).lower()
            word_to_save = article_match.group(2).strip()
        else:
            # –Ø–∫—â–æ –∞—Ä—Ç–∏–∫–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            word_to_save = word
            article_to_save = None
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–ª–æ–≤–æ –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Å–ª–æ–≤–Ω–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    exists_in_personal = False
    
    if dict_type == "personal":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ —Å–ª–æ–≤–Ω–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            cursor.execute(f"""
                SELECT 1 FROM words w
                JOIN user_{chat_id} u ON w.id = u.word_id
                WHERE LOWER(w.word) = LOWER(?)
            """, (word_to_save,))
            exists_in_personal = cursor.fetchone() is not None
        except Exception as e:
            print(f"Error checking if word exists: {e}")
    
    conn.close()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–∑ –º–æ–∂–ª–∏–≤–∏–º –∞—Ä—Ç–∏–∫–ª–µ–º
    success = db_manager.add_word(chat_id, word_to_save, translation, dict_type, article_to_save)
    
    if success:
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞—Ä—Ç–∏–∫–ª—è —Ç–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞
        if exists_in_personal:
            if article_to_save:
                message = f"‚úÖ –°–ª–æ–≤–æ '{article_to_save} {word_to_save}' –æ–Ω–æ–≤–ª–µ–Ω–æ —É –≤–∞—à–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É!"
            else:
                message = f"‚úÖ –°–ª–æ–≤–æ '{word_to_save}' –æ–Ω–æ–≤–ª–µ–Ω–æ —É –≤–∞—à–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É!"
        else:
            if article_to_save:
                message = f"‚úÖ –°–ª–æ–≤–æ '{article_to_save} {word_to_save}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!"
            else:
                message = f"‚úÖ –°–ª–æ–≤–æ '{word_to_save}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!"
            
        bot.send_message(
            chat_id, 
            message, 
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        bot.send_message(
            chat_id, 
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–ª–æ–≤–∞.", 
            reply_markup=main_menu_keyboard(chat_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    preserve_dict_type = (chat_id == ADMIN_ID and dict_type == "common")
    clear_state(chat_id, preserve_dict_type=preserve_dict_type)

def start_activity(chat_id, mode, exclude_max_rating=False):
    """Start learning or repetition activity"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —ñ —Ä—ñ–≤–µ–Ω—å –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal") 
    level = user_state.get(chat_id, {}).get("level", "easy")
    # –û—Ç—Ä–∏–º—É—î–º–æ shared_dict_id –î–û –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug: Starting {mode} activity for user {chat_id} with dict_type={dict_type}, level={level}, shared_dict_id={shared_dict_id}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False)
    
    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    new_state = {"dict_type": dict_type, "level": level}
    if shared_dict_id:
        new_state["shared_dict_id"] = shared_dict_id
    user_state[chat_id] = new_state
    
    # –Ø–∫—â–æ —Ü–µ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, –ø–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—å, —â–æ shared_dict_id –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π
    if dict_type == "shared":
        if not shared_dict_id:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ shared_dict_id –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result and result[0]:
                user_state[chat_id]["shared_dict_id"] = result[0]
                print(f"Retrieved shared_dict_id={result[0]} from database for user {chat_id}")
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ streak –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        streak = db_manager.update_user_streak(chat_id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
        df = None
        if dict_type == "shared":
            current_shared_dict_id = user_state[chat_id].get("shared_dict_id")
            if current_shared_dict_id:
                df = db_manager.get_shared_dictionary_words(chat_id, current_shared_dict_id)
                print(f"Got {len(df) if df is not None else 0} words from shared dictionary {current_shared_dict_id}")
            else:
                print("Error: shared_dict_id is missing for shared dictionary type")
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫.")
                return False
        else:
            df = db_manager.get_user_words(chat_id, dict_type)
        
        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–ª—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –Ω–µ-—Å–∫–ª–∞–¥–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if exclude_max_rating and len(df) > 5:  # –Ø–∫—â–æ —Å–ª—ñ–≤ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–≥–∞—Ç–æ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
            df_filtered = df[df['priority'] < 4.9]
            
            # –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞–±—ñ—Ä
            if len(df_filtered) >= 5:
                df = df_filtered
                print(f"Filtered out max-rating words, {len(df)} words remaining")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if df is None or df.empty:
            dict_name = "—Å–ø—ñ–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "shared" else "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É"
            bot.send_message(chat_id, f"üì≠ –£ {dict_name} —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
            return False
            
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ
        if 'id' not in df.columns:
            print(f"WARNING: DataFrame lacks 'id' column!")
            # –î–æ–¥–∞—î–º–æ id –∫–æ–ª–æ–Ω–∫—É –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            df['id'] = range(1, len(df) + 1)
            
        print(f"Successfully retrieved {len(df)} words from database with columns: {df.columns.tolist()}")
        
        # –î–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –±–µ—Ä–µ–º–æ 30% –Ω–∞–π—Ç—è–∂—á–∏—Ö —Å–ª—ñ–≤
        if level == "hard":
            # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ priority –º–∞—î —á–∏—Å–ª–æ–≤–∏–π —Ç–∏–ø
            df['priority'] = pd.to_numeric(df['priority'], errors='coerce').fillna(0.0)
            
            # –í–∏–≤—ñ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            print(f"DEBUG priority stats: min={df['priority'].min()}, max={df['priority'].max()}, mean={df['priority'].mean()}")
            print(f"DEBUG priority distribution: {df['priority'].value_counts().sort_index().to_dict()}")
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É (–Ω–∞–π–≤–∏—â—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å–ø–æ—á–∞—Ç–∫—É)
            df = df.sort_values(by='priority', ascending=False)
            
            # –ë–µ—Ä–µ–º–æ –≤–µ—Ä—Ö–Ω—ñ 30% —Å–ª—ñ–≤
            top_words_count = max(1, int(len(df) * 0.3))
            df = df.head(top_words_count)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –æ–±—Ä–∞–Ω—ñ —Å–ª–æ–≤–∞
            print(f"Hard level: selected {len(df)} top-rated words. Ratings: {df['priority'].tolist()[:5]}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        if mode == 'repeat':
            from handlers import start_repetition
            return start_repetition(chat_id, df)
        elif mode == 'learn':
            from handlers import start_learning
            return start_learning(chat_id, df)
    except Exception as e:
        print(f"ERROR using SQLite database: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        return False

def return_to_appropriate_menu(chat_id, success=True, message=None):
    """Return to the appropriate menu based on user's level"""
    level = user_state.get(chat_id, {}).get("level", "easy")
    
    if not message:
        message = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!" if success else "‚ùå –ü–æ–º–∏–ª–∫–∞!"
    
    if level == "easy":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –ª–µ–≥–∫–æ–≥–æ —Ä—ñ–≤–Ω—è
        from utils import easy_level_keyboard
        bot.send_message(chat_id, message, reply_markup=easy_level_keyboard())
    else:
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from utils import main_menu_keyboard
        bot.send_message(chat_id, message, reply_markup=main_menu_keyboard(chat_id))

def set_dictionary_type(chat_id, dict_type):
    """Set dictionary type to personal or common"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–ø –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    prev_type = user_state[chat_id].get("dict_type", "personal")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    user_state[chat_id]["dict_type"] = dict_type
    print(f"Set dictionary type for {chat_id} to {dict_type}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    try:
        # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–º—ñ–Ω—É
        if dict_type == "personal":
            # –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –æ—á–∏—â–∞—î–º–æ shared_dict_id –≤ –ë–î
            cursor.execute("UPDATE users SET shared_dict_id = NULL WHERE chat_id = ?", (chat_id,))
            conn.commit()
            
            message = f"üìö –û–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫."
            bot.send_message(chat_id, message, reply_markup=main_menu_keyboard(chat_id))
        elif dict_type == "common":
            # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞–∫–æ–∂ –æ—á–∏—â–∞—î–º–æ shared_dict_id –≤ –ë–î
            cursor.execute("UPDATE users SET shared_dict_id = NULL WHERE chat_id = ?", (chat_id,))
            conn.commit()
            
            message = f"üìö –û–±—Ä–∞–Ω–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫."
            if chat_id != ADMIN_ID:
                message += "\n‚ö†Ô∏è –£ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ –≤—á–∏—Ç–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Å–ª–æ–≤–∞."
            bot.send_message(chat_id, message, reply_markup=main_menu_keyboard(chat_id))
        elif dict_type == "shared":
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
                shared_dict_id = result[0]
                user_state[chat_id]["shared_dict_id"] = shared_dict_id
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Å–ª–æ–≤–Ω–∏–∫–∞
                cursor.execute("SELECT name FROM shared_dictionaries WHERE id = ?", (shared_dict_id,))
                dict_name = cursor.fetchone()[0]
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∑ –≤–∏–±—Ä–∞–Ω–∏–º —Å–ª–æ–≤–Ω–∏–∫–æ–º
                bot.send_message(
                    chat_id,
                    f"üìö –û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: <b>{dict_name}</b>",
                    parse_mode="HTML",
                    reply_markup=main_menu_keyboard(chat_id)
                )
            else:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –≤–∏–±—Ä–∞–≤ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
                from utils import shared_dictionary_keyboard
                bot.send_message(chat_id, "üë• –°–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ - –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                            reply_markup=shared_dictionary_keyboard())
    except Exception as e:
        print(f"Error in set_dictionary_type: {e}")
    finally:
        conn.close()
        
    return dict_type

# –ó–∞–ª–∏—à–∞—î–º–æ toggle_dictionary –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def toggle_dictionary(chat_id):
    """Toggle between dictionaries"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    current = user_state[chat_id].get("dict_type", "personal")
    
    if current == "personal":
        new_type = "common"
    else:
        new_type = "personal"
    
    return set_dictionary_type(chat_id, new_type)

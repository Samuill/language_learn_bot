# -*- coding: utf-8 -*-
from config import user_state, bot, ADMIN_ID
from utils import clear_state, main_menu_keyboard
import db_manager

def save_word(chat_id, translation=None):
    """Save word to dictionary"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    print(f"Debug: save_word for user {chat_id}, dict_type={dict_type}")
    
    # Check permissions for common dictionary
    if dict_type == "common" and chat_id != ADMIN_ID:
        bot.send_message(
            chat_id, 
            "‚ùå –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ, –∑–º—ñ–Ω—ñ—Ç—å —Å–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π.", 
            reply_markup=main_menu_keyboard(chat_id)
        )
        clear_state(chat_id)
        return
    
    data = user_state.get(chat_id, {})
    if not data or "word" not in data:
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ —Å–ª–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        clear_state(chat_id)
        return
    
    word = data["word"]
    translation = translation or data["auto_translation"]
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞—Ä—Ç–∏–∫–ª—å –∑—ñ —Å–ª–æ–≤–∞ (—è–∫—â–æ —î)
    article = None
    import re
    article_match = re.match(r'^(der|die|das)\s+(.+)$', word, re.IGNORECASE)
    if article_match:
        article = article_match.group(1)
        # –°–ª–æ–≤–æ –±–µ–∑ –∞—Ä—Ç–∏–∫–ª—è –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ add_word —á–µ—Ä–µ–∑ –¥–µ—Ç–µ–∫—Ü—ñ—é
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —ñ–∑ –º–æ–∂–ª–∏–≤–∏–º –∞—Ä—Ç–∏–∫–ª–µ–º
    success = db_manager.add_word(chat_id, word, translation, dict_type, article)
    
    if success:
        bot.send_message(
            chat_id, 
            "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", 
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        bot.send_message(
            chat_id, 
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–ª–æ–≤–∞.", 
            reply_markup=main_menu_keyboard(chat_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    preserve_dict_type = (chat_id == ADMIN_ID and dict_type == "common")
    clear_state(chat_id, preserve_dict_type=preserve_dict_type)

def start_activity(chat_id, mode):
    """Start learning or repetition activity"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    print(f"Debug: Starting {mode} activity for user {chat_id} with dict_type={dict_type}")
    
    clear_state(chat_id)
    
    # –í—ñ–¥—Ä–∞–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    user_state[chat_id] = {"dict_type": dict_type}
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ SQLite –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª—ñ–≤
        import db_manager
        # –û–Ω–æ–≤–ª—é—î–º–æ streak –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        streak = db_manager.update_user_streak(chat_id)
        print(f"User {chat_id} streak updated: {streak}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        df = db_manager.get_user_words(chat_id, dict_type)
        
        if df.empty:
            dict_name = "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É"
            bot.send_message(chat_id, f"üì≠ –£ {dict_name} —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
            return False
    except Exception as e:
        print(f"Error using SQLite, falling back to CSV: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: —Å—Ç–∞—Ä–∏–π CSV –º–µ—Ç–æ–¥
        from utils import track_activity
        track_activity(chat_id)
        from storage import get_dataframe
        df = get_dataframe(chat_id)
        if df is None or df.empty:
            dict_name = "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É"
            bot.send_message(chat_id, f"üì≠ –£ {dict_name} —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
            return False
    
    if mode == 'repeat':
        from handlers import start_repetition
        return start_repetition(chat_id, df)
    elif mode == 'learn':
        from handlers import start_learning
        return start_learning(chat_id, df)
    return False

def set_dictionary_type(chat_id, dict_type):
    """Set dictionary type to personal or common"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–ø –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    prev_type = user_state[chat_id].get("dict_type", "personal")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    user_state[chat_id]["dict_type"] = dict_type
    print(f"Set dictionary type for {chat_id} to {dict_type}")
    
    # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–º—ñ–Ω—É
    dict_name = "–∑–∞–≥–∞–ª—å–Ω–∏–π" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π"
    message = f"üìö –û–±—Ä–∞–Ω–æ {dict_name} —Å–ª–æ–≤–Ω–∏–∫."
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–æ–¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    if dict_type == "common" and chat_id != ADMIN_ID:
        message += "\n‚ö†Ô∏è –£ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ –≤—á–∏—Ç–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Å–ª–æ–≤–∞."
    
    # –ó–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä —Å–ª–æ–≤–Ω–∏–∫–∞
    try:
        bot.send_message(chat_id, message, reply_markup=main_menu_keyboard(chat_id))
    except Exception as e:
        print(f"Error sending dictionary change message: {e}")
    
    return dict_type

# –ó–∞–ª–∏—à–∞—î–º–æ toggle_dictionary –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def toggle_dictionary(chat_id):
    """Toggle between personal and common dictionary"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    current = user_state[chat_id].get("dict_type", "personal")
    new_type = "common" if current == "personal" else "personal"
    return set_dictionary_type(chat_id, new_type)

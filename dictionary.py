# -*- coding: utf-8 -*-
import pandas as pd
import os
from config import translator, user_state, bot, ADMIN_ID
from storage import get_dataframe, save_dataframe, get_user_file_path, get_common_file_path
from utils import clear_state, main_menu_keyboard

def save_word(chat_id, translation=None):
    """Save word to dictionary"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    print(f"Debug: save_word for user {chat_id}, dict_type={dict_type}")
    
    # Check permissions for common dictionary
    if dict_type == "common" and chat_id != ADMIN_ID:
        bot.send_message(
            chat_id, 
            "‚ùå –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ, –∑–º—ñ–Ω—ñ—Ç—å —Å–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π.", 
            reply_markup=main_menu_keyboard(chat_id)
        )
        clear_state(chat_id)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∑—ñ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ uk –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    language = user_state.get(chat_id, {}).get("language", "uk")
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
    if dict_type == "common" and chat_id == ADMIN_ID:
        # –î–ª—è –∞–¥–º—ñ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        file_path, _ = get_common_file_path()
        print(f"Debug: Admin is adding word to common dictionary: {file_path} using language: {language}")
    else:
        # –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        file_path, dict_language = get_user_file_path(chat_id)
        if dict_language:  # –Ø–∫—â–æ –º–æ–≤–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ —Ñ–∞–π–ª—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
            language = dict_language
        print(f"Debug: User is adding word to personal dictionary: {file_path} using language: {language}")
        
    if not file_path:
        bot.send_message(chat_id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ DataFrame –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ dict_type)
    if dict_type == "common" and chat_id == ADMIN_ID:
        # –î–ª—è –∞–¥–º—ñ–Ω–∞ –º–∏ —è–≤–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        common_path, _ = get_common_file_path()
        if os.path.exists(common_path):
            df = pd.read_csv(common_path, encoding='utf-8-sig')
        else:
            df = pd.DataFrame(columns=["word", "translation", "priority", "article"])
    else:
        # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π get_dataframe
        df = get_dataframe(chat_id)
        
    if df is None:
        df = pd.DataFrame(columns=["word", "translation", "priority", "article"])
    
    data = user_state[chat_id]
    translation = translation or data["auto_translation"]
    
    new_row = pd.DataFrame({
        "word": [data["word"]],
        "translation": [translation],
        "priority": [0.0],
        "article": [""]  # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞—Ä—Ç–∏–∫–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    })
    
    if not new_row.empty:
        df = pd.concat([df, new_row], ignore_index=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ñ–∞–π–ª, —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
        if dict_type == "common" and chat_id == ADMIN_ID:
            # –î–ª—è –∞–¥–º—ñ–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
            common_path, _ = get_common_file_path()
            df.to_csv(common_path, index=False, encoding='utf-8-sig')
            print(f"Debug: Directly saved to common dictionary: {common_path}")
            
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ clear_state –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
            clear_state(chat_id, preserve_dict_type=True)
        else:
            # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            save_dataframe(chat_id, df, language)
            clear_state(chat_id)
    else:
        # –Ø–∫—â–æ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
        preserve_dict_type = (chat_id == ADMIN_ID and dict_type == "common")
        clear_state(chat_id, preserve_dict_type=preserve_dict_type)

def start_activity(chat_id, mode):
    """Start learning or repetition activity"""
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º —Å—Ç–∞–Ω—É
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    print(f"Debug: Starting {mode} activity for user {chat_id} with dict_type={dict_type}")
    
    clear_state(chat_id)
    
    # –í—ñ–¥—Ä–∞–∑—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
    user_state[chat_id] = {"dict_type": dict_type}
    
    from utils import track_activity
    track_activity(chat_id)
    
    df = get_dataframe(chat_id)
    if df is None or df.empty:
        dict_name = "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É"
        bot.send_message(chat_id, f"üì≠ –£ {dict_name} —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤.")
        return False
    
    if mode == 'repeat':
        from handlers import start_repetition
        return start_repetition(chat_id, df)
    elif mode == 'learn':
        from handlers import start_learning
        return start_learning(chat_id, df)
    return False

def set_dictionary_type(chat_id, dict_type):
    """Set dictionary type to personal or common"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–ø –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    prev_type = user_state[chat_id].get("dict_type", "personal")
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    user_state[chat_id]["dict_type"] = dict_type
    print(f"Set dictionary type for {chat_id} to {dict_type}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    if dict_type == "common":
        common_file, _ = get_common_file_path()
        if not os.path.exists(common_file):
            print(f"Warning: Common dictionary file does not exist: {common_file}")
            # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É—î–º–æ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏
            try:
                common_df = pd.DataFrame(columns=["word", "translation", "priority", "article"])
                os.makedirs(os.path.dirname(common_file), exist_ok=True)
                common_df.to_csv(common_file, index=False, encoding='utf-8-sig')
                print(f"Created common dictionary: {common_file}")
            except Exception as e:
                print(f"Error creating common dictionary: {e}")
    else:  # personal
        file_path, _ = get_user_file_path(chat_id)
        if not file_path:
            print(f"Warning: User {chat_id} has no personal dictionary")
    
    # –Ü–Ω—Ñ–æ—Ä–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–º—ñ–Ω—É
    dict_name = "–∑–∞–≥–∞–ª—å–Ω–∏–π" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π"
    message = f"üìö –û–±—Ä–∞–Ω–æ {dict_name} —Å–ª–æ–≤–Ω–∏–∫."
    
    # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–æ–¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    if dict_type == "common" and chat_id != ADMIN_ID:
        message += "\n‚ö†Ô∏è –£ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —Ç—ñ–ª—å–∫–∏ –≤—á–∏—Ç–∏ —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Å–ª–æ–≤–∞."
    
    # –ó–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—ñ—Ä —Å–ª–æ–≤–Ω–∏–∫–∞
    try:
        bot.send_message(chat_id, message, reply_markup=main_menu_keyboard(chat_id))
    except Exception as e:
        print(f"Error sending dictionary change message: {e}")
    
    return dict_type

# –ó–∞–ª–∏—à–∞—î–º–æ toggle_dictionary –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
def toggle_dictionary(chat_id):
    """Toggle between personal and common dictionary"""
    if chat_id not in user_state:
        user_state[chat_id] = {}
    
    current = user_state[chat_id].get("dict_type", "personal")
    new_type = "common" if current == "personal" else "personal"
    return set_dictionary_type(chat_id, new_type)

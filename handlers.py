# -*- coding: utf-8 -*-
import random
import telebot
import pandas as pd
from config import bot, translator, user_state, ADMIN_ID, scheduler  # –î–æ–¥–∞–Ω–æ scheduler
from utils import clear_state, track_activity, main_menu_keyboard, main_menu_cancel, language_selection_keyboard, easy_level_keyboard, shared_dictionary_keyboard
from storage import get_dataframe, save_dataframe, get_user_file_path
from dictionary import save_word, toggle_dictionary, start_activity, return_to_appropriate_menu, set_dictionary_type
from utils.language_utils import get_text, is_command

def start_learning(chat_id, df):
    """Start learning new words activity"""
    df = df.sort_values(by="priority", ascending=False)
    words = df.sample(min(10, len(df)))
    
    translations = words['translation'].tolist()
    de_words = words['word'].tolist()
    random.shuffle(translations)
    random.shuffle(de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(translations, de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    user_state[chat_id] = {
        "pairs": list(zip(words['translation'], words['word'])),
        "selected_tr": None,
        "message_id": None,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    
    sent_message = bot.send_message(chat_id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[chat_id]["message_id"] = sent_message.message_id
    return True

def start_repetition(chat_id, df):
    """Start repetition activity"""
    word = df.sample(1).iloc[0]
    sample_size = min(3, len(df))
    translations = df['translation'].sample(sample_size).tolist()
    if word['translation'] not in translations:
        translations[0] = word['translation']
    random.shuffle(translations)
    
    markup = telebot.types.InlineKeyboardMarkup()
    for tr in translations:
        markup.add(telebot.types.InlineKeyboardButton(
            tr, 
            callback_data=f"ans_{word['word']}_{tr}"
        ))
    
    sent_message = bot.send_message(chat_id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {word['word']}", reply_markup=markup)
    user_state[chat_id] = {
        "current_word": word,
        "message_id": sent_message.message_id,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    return True

def start_article_activity(chat_id):
    """Start learning articles activity"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug: Starting article activity for user {chat_id} with dict_type={dict_type}, shared_dict_id={shared_dict_id}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ, —è–∫–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ
        last_word_id = user_state.get(chat_id, {}).get("last_article_word_id", None)
        
        import db_manager
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        language = db_manager.get_user_language(chat_id) or "uk"
        
        # –Ø–∫—â–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ "shared", –∞–ª–µ shared_dict_id –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        if dict_type == "shared" and not shared_dict_id:
            cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            if result and result[0]:
                shared_dict_id = result[0]
                print(f"Retrieved shared_dict_id={shared_dict_id} for user {chat_id}")
            else:
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫. –°–ø–µ—Ä—à—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–ª–æ–≤–Ω–∏–∫.")
                return_to_appropriate_menu(chat_id, False, "–ù–µ –≤–∏–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
                conn.close()
                return False
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏, –≤–∏–∫–ª—é—á–∞—é—á–∏ –∞—Ä—Ç–∏–∫–ª—å –∑ ID=4 (–ø–æ—Ä–æ–∂–Ω—ñ–π) 
        # —ñ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–∫–∞–∑–∞–Ω–µ —Å–ª–æ–≤–æ
        results = None
        
        if dict_type == "shared" and shared_dict_id:
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç
            print(f"Getting articles from shared dictionary {shared_dict_id}")
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM shared_dict_{shared_dict_id} sd
            JOIN words w ON sd.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ
                query = f"""
                SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
                FROM shared_dict_{shared_dict_id} sd
                JOIN words w ON sd.word_id = w.id
                JOIN article a ON w.article_id = a.id
                WHERE w.article_id != 4 AND w.article_id IS NOT NULL
                ORDER BY RANDOM()
                LIMIT 20
                """
                cursor.execute(query)
                results = cursor.fetchall()
            
        elif dict_type == "common":
            # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM words w
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                query = query.replace(exclude_condition, "")
                cursor.execute(query)
                results = cursor.fetchall()
        else:
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, u.rating
            FROM user_{chat_id} u
            JOIN words w ON u.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY u.rating ASC
            LIMIT 15
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                query = query.replace(exclude_condition, "")
                cursor.execute(query)
                results = cursor.fetchall()
        
        conn.close()
        
        if not results:
            bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return_to_appropriate_menu(chat_id, False, "–£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return False
            
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        import random
        result = random.choice(results)
        print(f"Debug: Selected result: {result}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å–ª–æ–≤–∞, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏, —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ –º–∞—Ç–∏ —Ä—ñ–∑–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤
        if dict_type == "personal":
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ—Å—Ç–∏—Ç—å 6 –ø–æ–ª—ñ–≤ (–≤–∫–ª—é—á–Ω–æ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º)
            if len(result) >= 6:
                word_id, word, correct_article, article_id, translation, _ = result
            else:
                # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ –º–µ–Ω—à–µ –ø–æ–ª—ñ–≤
                word_id, word, correct_article, article_id, translation = result[:5]
        else:
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ—Å—Ç–∏—Ç—å 5 –ø–æ–ª—ñ–≤
            if len(result) >= 5:
                word_id, word, correct_article, article_id, translation = result[:5]
            else:
                # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫
                print(f"Warning: Unexpected result format: {result}")
                raise ValueError(f"Unexpected result format: got {len(result)} values, expected at least 5")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–æ–≤–∞, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É
        user_state[chat_id] = {
            "word_id": word_id,
            "word": word,
            "correct_article": correct_article,
            "dict_type": dict_type,
            "level": "easy",
            "translation": translation,
            "last_article_word_id": word_id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        }
        
        if shared_dict_id:
            user_state[chat_id]["shared_dict_id"] = shared_dict_id
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=3)
        markup.add(
            telebot.types.InlineKeyboardButton("der", callback_data=f"art_der_{word_id}"),
            telebot.types.InlineKeyboardButton("die", callback_data=f"art_die_{word_id}"),
            telebot.types.InlineKeyboardButton("das", callback_data=f"art_das_{word_id}")
        )
        
        sent_message = bot.send_message(
            chat_id,
            f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è —Å–ª–æ–≤–∞:\n\n<b>{word}</b>\n\n<i>–ü–µ—Ä–µ–∫–ª–∞–¥: {translation}</i>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        user_state[chat_id]["message_id"] = sent_message.message_id
        return True
        
    except Exception as e:
        print(f"Error in start_article_activity: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤.")
        return False

@bot.callback_query_handler(func=lambda call: call.data.startswith(('art_der_', 'art_die_', 'art_das_')))
def handle_article_selection(call):
    """Handle article selection"""
    chat_id = call.message.chat.id
    
    if chat_id not in user_state or "correct_article" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ'")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–∞–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å —Ç–∞ ID —Å–ª–æ–≤–∞
    selected_article = None
    if call.data.startswith('art_der_'):
        selected_article = 'der'
    elif call.data.startswith('art_die_'):
        selected_article = 'die'
    elif call.data.startswith('art_das_'):
        selected_article = 'das'
    
    correct_article = user_state[chat_id]["correct_article"]
    word = user_state[chat_id]["word"]
    word_id = user_state[chat_id]["word_id"]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∏–±–æ—Ä—É
    is_correct = selected_article == correct_article
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state[chat_id].get("dict_type", "personal")
    if dict_type == "shared":
        import db_manager
        shared_dict_id = user_state[chat_id].get("shared_dict_id")
        db_manager.update_word_rating_shared_dict(chat_id, word_id, -0.1 if is_correct else 0.1, shared_dict_id)
    elif dict_type == "personal":
        import db_manager
        db_manager.update_word_rating(chat_id, word_id, -0.1 if is_correct else 0.1)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if is_correct:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        bot.edit_message_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ <b>{word}</b> –º–∞—î –∞—Ä—Ç–∏–∫–ª—å <b>{correct_article}</b>.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å: {correct_article}")
        bot.edit_message_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ <b>{word}</b> –º–∞—î –∞—Ä—Ç–∏–∫–ª—å <b>{correct_article}</b>, –∞ –Ω–µ {selected_article}.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    import threading
    threading.Timer(2, lambda: start_article_activity(chat_id)).start()

# Command handlers
@bot.message_handler(commands=["start"])
def main_menu(message):
    clear_state(message.chat.id)
    file_path, language = get_user_file_path(message.chat.id)
    track_activity(message.chat.id)
    
    if not file_path:
        # If file doesn't exist, offer language selection
        bot.send_message(message.chat.id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", 
                         reply_markup=language_selection_keyboard())
        user_state[message.chat.id] = {"step": "language_selection"}
    else:
        # If file exists, show main menu
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                         reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"])
def handle_language_selection(message):
    chat_id = message.chat.id
    if user_state.get(chat_id, {}).get("step") == "language_selection":
        language = "uk" if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "ru"
        
        # Create empty dictionary for user
        df = pd.DataFrame(columns=["word", "translation", "priority"])
        save_dataframe(chat_id, df, language)
        
        bot.send_message(chat_id, f"‚úÖ –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–±—Ä–∞–Ω–æ: {message.text}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏–≤—á–∞—Ç–∏ —ó—Ö.", 
                         reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
def add_word(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:", reply_markup=main_menu_cancel())
    user_state[message.chat.id] = {
        "step": "adding_word",
        "dict_type": user_state.get(message.chat.id, {}).get("dict_type", "personal")
    }

@bot.message_handler(func=lambda message: message.text in ["‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞", "–í—ñ–¥–º—ñ–Ω–∞"])
def cancel_action(message):
    """Cancel current action and return to main menu"""
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "adding_word")
def handle_translation(message):
    """Handle word input for translation"""
    chat_id = message.chat.id
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ "–í—ñ–¥–º—ñ–Ω–∞"
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞" or message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                       reply_markup=main_menu_keyboard(chat_id))
        return
        
    if not message.text or message.text.startswith('/'):
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç–æ–º!")
        return
        
    # Check if the text is a command
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
        
    word = message.text.strip()
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Check permissions for common dictionary
    if dict_type == "common" and chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞!", 
                        reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)
        return
    
    if dict_type == "personal":
        file_path, language = get_user_file_path(chat_id)
        if not file_path:
            bot.send_message(chat_id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
            return
    else:
        from storage import get_common_file_path
        _, language = get_common_file_path()
    
    translation = translator.translate(word, src="de", dest=language).text
    
    if translation:
        # Update user state with translation data
        user_state[chat_id].update({
            "step": "confirm_translation",
            "word": word,
            "auto_translation": translation,
            "language": language
        })
        
        # Create confirmation keyboard with emojis
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞")  # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        bot.send_message(chat_id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {translation}. –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=keyboard)
    else:
        bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "confirm_translation")
def handle_confirmation(message):
    """Handle translation confirmation"""
    chat_id = message.chat.id
    
    try:
        if message.text == "‚úÖ –¢–∞–∫" or message.text == "–¢–∞–∫":
            save_word(chat_id)
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", 
                            reply_markup=main_menu_keyboard(chat_id))
        elif message.text == "‚ùå –ù—ñ" or message.text == "–ù—ñ":
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É:", 
                           reply_markup=main_menu_cancel())
            user_state[chat_id]["step"] = "manual_translation"
        elif message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞" or message.text == "–í—ñ–¥–º—ñ–Ω–∞":
            clear_state(chat_id)
            bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                           reply_markup=main_menu_keyboard(chat_id))
        else:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '‚úÖ –¢–∞–∫', '‚ùå –ù—ñ' –∞–±–æ '‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞'.")
    except Exception as e:
        print(f"Error in handle_confirmation: {e}")
        clear_state(chat_id)
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", 
                       reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "manual_translation")
def handle_manual_translation(message):
    """Handle manual translation input"""
    chat_id = message.chat.id
    
    try:
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–í—ñ–¥–º—ñ–Ω–∞"
        if message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞" or message.text == "–í—ñ–¥–º—ñ–Ω–∞":
            clear_state(chat_id)
            bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                           reply_markup=main_menu_keyboard(chat_id))
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é
        if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", 
                          "‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞"]:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
            return
        
        save_word(chat_id, message.text.strip())
        bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º!", 
                        reply_markup=main_menu_keyboard(chat_id))
    except Exception as e:
        print(f"Error in handle_manual_translation: {e}")
        clear_state(chat_id)
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É.", 
                       reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞")
def learn_words(message):
    start_activity(message.chat.id, 'learn')

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
def repeat_words(message):
    start_activity(message.chat.id, 'repeat')

@bot.message_handler(func=lambda message: message.text in ["üåê –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"])
def switch_dictionary(message):
    toggle_dictionary(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('tr_', 'de_')))
def handle_pairs(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state or "pairs" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞'")
        return
    
    state = user_state[chat_id]
    
    if call.data.startswith('tr_'):
        if state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚è≥ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
        state['selected_tr'] = call.data[3:]
        bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ: {state['selected_tr']}")
    
    elif call.data.startswith('de_'):
        if not state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥")
            return
        
        selected_de = call.data[3:]
        correct = any(tr == state['selected_tr'] and de == selected_de for tr, de in state["pairs"])
        
        df = get_dataframe(chat_id)
        if correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            df.loc[df['translation'] == state['selected_tr'], 'priority'] -= 0.001
            markup = call.message.reply_markup
            for row in markup.keyboard:
                for btn in row:
                    if btn.callback_data in [f'tr_{state["selected_tr"]}', f'de_{selected_de}']:
                        btn.text += " ‚úÖ"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            
            if "found_pairs" not in state:
                state["found_pairs"] = []
            state["found_pairs"].append((state['selected_tr'], selected_de))
            
            if len(state["found_pairs"]) == len(state["pairs"]):
                bot.delete_message(chat_id, call.message.message_id)
                learn_words(call.message)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            df.loc[df['translation'] == state['selected_tr'], 'priority'] += 0.001
        
        file_path, lang = get_user_file_path(chat_id) if state["dict_type"] == "personal" else (None, None)
        save_dataframe(chat_id, df, lang if lang else "common")
        state['selected_tr'] = None

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏'")
        return
    
    _, word, selected_tr = call.data.split('_')
    correct_tr = user_state[chat_id]["current_word"]['translation']
    
    df = get_dataframe(chat_id)
    if selected_tr == correct_tr:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        df.loc[df['word'] == word, 'priority'] -= 0.001
        bot.delete_message(chat_id, call.message.message_id)
        repeat_words(call.message)
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tr}")
        df.loc[df['word'] == word, 'priority'] += 0.001
        markup = call.message.reply_markup
        for row in markup.keyboard:
            if row[0].callback_data == call.data:
                row[0].text += " ‚ùå"
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
    
    file_path, lang = get_user_file_path(chat_id) if user_state[chat_id].get("dict_type") == "personal" else (None, None)
    save_dataframe(chat_id, df, lang if lang else "common")

@bot.message_handler(commands=['fire'])
def test_fire(message):
    if message.from_user.id == ADMIN_ID:
        try:
            from scheduler import send_reminder
            send_reminder()
            bot.reply_to(message, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ /fire: {e}")
            bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    if message.from_user.id == ADMIN_ID:
        bot.stop_polling()
        scheduler.shutdown(wait=False)
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
        exit(0)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ —Ç–∞ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
@bot.message_handler(func=lambda message: message.text == "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å")
def easy_level(message):
    """Show easy level menu with learning activities"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "easy"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "easy"}
    
    from utils import easy_level_keyboard
    bot.send_message(chat_id,  get_text("easy_level_select_activity",chat_id), 
                   reply_markup=easy_level_keyboard())

@bot.message_handler(func=lambda message: message.text == "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å")
def medium_level(message):
    """Show medium level menu (placeholder)"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "medium"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "medium"}
    
    # Show "under development" message
    bot.send_message(chat_id, "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å.", 
                   reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å")
def hard_level(message):
    """Show hard level menu (placeholder)"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "hard"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "hard"}
    
    # Show "under development" message
    bot.send_message(chat_id, "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å.", 
                   reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
def return_to_main_menu(message):
    """Return to main menu"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Preserve dictionary type but remove level information
    if chat_id in user_state:
        user_state[chat_id] = {"dict_type": dict_type}
    
    # Send main menu
    bot.send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", 
                   reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üè∑Ô∏è –í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ")
def learn_articles(message):
    """Start learning articles activity"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    # Setup user state
    state_data = {"dict_type": dict_type, "level": "easy"}
    if shared_dict_id:
        state_data["shared_dict_id"] = shared_dict_id
    
    # Update or create user state
    if chat_id in user_state:
        user_state[chat_id].update(state_data)
    else:
        user_state[chat_id] = state_data
    
    # Start the article learning activity
    start_article_activity(chat_id)

@bot.message_handler(func=lambda message: message.text.startswith("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"))
def personal_dictionary_button(message):
    """Switch to personal dictionary"""
    chat_id = message.chat.id
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è shared_dict_id
    import db_manager
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET shared_dict_id = NULL WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ –ø–∞–º'—è—Ç—ñ
    if chat_id in user_state:
        user_state[chat_id].update({"dict_type": "personal"})
        if "shared_dict_id" in user_state[chat_id]:
            del user_state[chat_id]["shared_dict_id"]
    else:
        user_state[chat_id] = {"dict_type": "personal"}
    
    bot.send_message(chat_id, "üìö –û–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫.",
                    reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text.startswith("üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"))
def shared_dictionary_menu(message):
    """Show shared dictionary menu"""
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    import db_manager
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    
    if result and result[0]:
        # –Ø–∫—â–æ –≤–∂–µ —î –≤–∏–±—Ä–∞–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω—å–æ–≥–æ
        shared_dict_id = result[0]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id in user_state:
            user_state[chat_id].update({"dict_type": "shared", "shared_dict_id": shared_dict_id})
        else:
            user_state[chat_id] = {"dict_type": "shared", "shared_dict_id": shared_dict_id}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ª–æ–≤–Ω–∏–∫
        cursor.execute("SELECT name FROM shared_dictionaries WHERE id = ?", (shared_dict_id,))
        dict_info = cursor.fetchone()
        dict_name = dict_info[0] if dict_info else "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–ª–æ–≤–Ω–∏–∫"
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        bot.send_message(
            chat_id,
            f"üìö –û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: <b>{dict_name}</b>",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
        db_manager.create_shared_dictionary_tables()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        bot.send_message(chat_id, "üë• –°–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ - –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                        reply_markup=shared_dictionary_keyboard())
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id in user_state:
            user_state[chat_id].update({"dict_type": "shared"})
        else:
            user_state[chat_id] = {"dict_type": "shared"}
    
    conn.close()

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
@bot.message_handler(func=lambda message: message.text == "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
def create_shared_dictionary(message):
    """Create a new shared dictionary"""
    chat_id = message.chat.id
    clear_state(chat_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state[chat_id] = {
        "step": "creating_shared_dict",
    }
    
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞:",
                    reply_markup=main_menu_cancel())

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "creating_shared_dict")
def handle_shared_dict_name(message):
    """Handle shared dictionary name input"""
    chat_id = message.chat.id
    
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞" or message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))
        return
    
    dict_name = message.text.strip()
    
    if len(dict_name) < 3 or len(dict_name) > 30:
        bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 3 –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    import db_manager
    code, shared_dict_id = db_manager.create_shared_dictionary(chat_id, dict_name)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É
    bot.send_message(
        chat_id,
        f"‚úÖ –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ '{dict_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
        f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø—É: <code>{code}</code>\n\n"
        f"–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏, —â–æ–± –≤–æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–∞—à–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard(chat_id)
    )
    
    clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "üîë –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞")
def join_shared_dictionary(message):
    """Join an existing shared dictionary"""
    chat_id = message.chat.id
    clear_state(chat_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state[chat_id] = {
        "step": "joining_shared_dict",
    }
    
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞:",
                    reply_markup=main_menu_cancel())

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "joining_shared_dict")
def handle_shared_dict_code(message):
    """Handle shared dictionary code input"""
    chat_id = message.chat.id
    
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞" or message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))
        return
    
    code = message.text.strip().upper()
    
    if len(code) != 6:
        bot.send_message(chat_id, "‚ùå –ö–æ–¥ –¥–æ—Å—Ç—É–ø—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—å –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    import db_manager
    success, result = db_manager.join_shared_dictionary(chat_id, code)
    
    if success:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        bot.send_message(
            chat_id,
            f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ '{result}'!",
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        bot.send_message(chat_id, f"‚ùå {result}")
    
    clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ—ó —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏")
def my_shared_dictionaries(message):
    """Show user's shared dictionaries"""
    chat_id = message.chat.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    import db_manager
    shared_dicts = db_manager.get_user_shared_dictionaries(chat_id)
    
    if not shared_dicts:
        bot.send_message(
            chat_id,
            "üì≠ –í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –∂–æ–¥–Ω–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞.",
            reply_markup=shared_dictionary_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    response = "üìã –í–∞—à—ñ —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏:\n\n"
    
    for dict_info in shared_dicts:
        admin_status = "üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if dict_info['is_admin'] else "üë§ –£—á–∞—Å–Ω–∏–∫"
        response += f"‚Ä¢ <b>{dict_info['name']}</b> ({admin_status})\n"
        response += f"  –ö–æ–¥ –¥–æ—Å—Ç—É–ø—É: <code>{dict_info['code']}</code>\n\n"
    
    response += "–û–±–µ—Ä—ñ—Ç—å —Å–ª–æ–≤–Ω–∏–∫, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ª–æ–≤–Ω–∏–∫–∞
    markup = telebot.types.InlineKeyboardMarkup()
    
    for dict_info in shared_dicts:
        admin_icon = "üëë" if dict_info['is_admin'] else "üë§"
        button_text = f"{admin_icon} {dict_info['name']}"
        markup.add(telebot.types.InlineKeyboardButton(
            button_text, 
            callback_data=f"use_shared_dict_{dict_info['id']}"
        ))
    
    bot.send_message(
        chat_id,
        response,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("use_shared_dict_"))
def use_shared_dictionary(call):
    """Switch to a specific shared dictionary"""
    chat_id = call.message.chat.id
    shared_dict_id = int(call.data.replace("use_shared_dict_", ""))
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    import db_manager
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET shared_dict_id = ? WHERE chat_id = ?', 
                 (shared_dict_id, chat_id))
    conn.commit()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    cursor.execute('SELECT name FROM shared_dictionaries WHERE id = ?', (shared_dict_id,))
    dict_name = cursor.fetchone()[0]
    conn.close()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–∞–º'—è—Ç—ñ
    if chat_id in user_state:
        user_state[chat_id].update({"dict_type": "shared", "shared_dict_id": shared_dict_id})
    else:
        user_state[chat_id] = {"dict_type": "shared", "shared_dict_id": shared_dict_id}
    
    bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: {dict_name}")
    bot.delete_message(chat_id, call.message.message_id)
    
    bot.send_message(
        chat_id,
        f"üìö –û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: <b>{dict_name}</b>\n"
        f"–¢–µ–ø–µ—Ä –≤—Å—ñ –¥—ñ—ó –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å —É —Ü—å–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard(chat_id)
    )

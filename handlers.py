# -*- coding: utf-8 -*-
import random
import telebot
import pandas as pd
from config import bot, translator, user_state, ADMIN_ID
from utils import clear_state, track_activity, main_menu_keyboard, main_menu_cancel, language_selection_keyboard
from storage import get_dataframe, save_dataframe, get_user_file_path
from dictionary import save_word, toggle_dictionary, start_activity

def start_learning(chat_id, df):
    """Start learning new words activity"""
    df = df.sort_values(by="priority", ascending=False)
    words = df.sample(min(10, len(df)))
    
    translations = words['translation'].tolist()
    de_words = words['word'].tolist()
    random.shuffle(translations)
    random.shuffle(de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(translations, de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    user_state[chat_id] = {
        "pairs": list(zip(words['translation'], words['word'])),
        "selected_tr": None,
        "message_id": None,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    
    sent_message = bot.send_message(chat_id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[chat_id]["message_id"] = sent_message.message_id
    return True

def start_repetition(chat_id, df):
    """Start repetition activity"""
    word = df.sample(1).iloc[0]
    sample_size = min(4, len(df))  # Changed from 3 to 4
    translations = df['translation'].sample(sample_size).tolist()
    if word['translation'] not in translations:
        translations[0] = word['translation']
    random.shuffle(translations)
    
    markup = telebot.types.InlineKeyboardMarkup()
    for tr in translations:
        markup.add(telebot.types.InlineKeyboardButton(
            tr, 
            callback_data=f"ans_{word['word']}_{tr}"
        ))
    
    sent_message = bot.send_message(chat_id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {word['word']}", reply_markup=markup)
    user_state[chat_id] = {
        "current_word": word,
        "message_id": sent_message.message_id,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    return True

# Command handlers
@bot.message_handler(commands=["start"])
def main_menu(message):
    clear_state(message.chat.id)
    file_path, language = get_user_file_path(message.chat.id)
    track_activity(message.chat.id)
    
    if not file_path:
        # If file doesn't exist, offer language selection
        bot.send_message(message.chat.id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", 
                         reply_markup=language_selection_keyboard())
        user_state[message.chat.id] = {"step": "language_selection"}
    else:
        # If file exists, show main menu
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                         reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"])
def handle_language_selection(message):
    chat_id = message.chat.id
    if user_state.get(chat_id, {}).get("step") == "language_selection":
        language = "uk" if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "ru"
        
        # Create empty dictionary for user
        df = pd.DataFrame(columns=["word", "translation", "priority"])
        save_dataframe(chat_id, df, language)
        
        bot.send_message(chat_id, f"‚úÖ –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–±—Ä–∞–Ω–æ: {message.text}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏–≤—á–∞—Ç–∏ —ó—Ö.", 
                         reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
def add_word(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:", reply_markup=main_menu_cancel())
    user_state[message.chat.id] = {
        "step": "adding_word",
        "dict_type": user_state.get(message.chat.id, {}).get("dict_type", "personal")
    }

@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–º—ñ–Ω–∞")
def cancel_action(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "adding_word")
def handle_translation(message):
    if not message.text or message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç–æ–º!")
        return
        
    # Check if the text is a command
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
        
    word = message.text.strip()
    dict_type = user_state.get(message.chat.id, {}).get("dict_type", "personal")
    
    # Check permissions for common dictionary
    if dict_type == "common" and message.chat.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞!", 
                        reply_markup=main_menu_keyboard(message.chat.id))
        clear_state(message.chat.id)
        return
    
    # Use a proper language code (default to Ukrainian for common dict)
    if dict_type == "personal":
        file_path, language = get_user_file_path(message.chat.id)
        if not file_path:
            bot.send_message(message.chat.id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
            return
    else:
        language = "uk"  # Default language for common dictionary
    
    translation = translator.translate(word, src="de", dest=language).text
    
    if translation:
        user_state[message.chat.id].update({
            "step": "confirm_translation",
            "word": word,
            "auto_translation": translation
        })
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–¢–∞–∫", "–ù—ñ","–í—ñ–¥–º—ñ–Ω–∞")
        bot.send_message(message.chat.id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {translation}. –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "confirm_translation")
def handle_confirmation(message):
    if message.text == "–¢–∞–∫":
        save_word(message.chat.id)
        bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", 
                        reply_markup=main_menu_keyboard(message.chat.id))
    elif message.text == "–ù—ñ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É:", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        user_state[message.chat.id]["step"] = "manual_translation"
    elif message.text == "–í—ñ–¥–º—ñ–Ω–∞":
        clear_state(message.chat.id)
        bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                        reply_markup=main_menu_keyboard(message.chat.id))
    else:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–í—ñ–¥–º—ñ–Ω–∞'.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "manual_translation")
def handle_manual_translation(message):
    # Check if input is a command
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
    
    save_word(message.chat.id, message.text.strip())
    bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º!", 
                    reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text == "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞")
def learn_words(message):
    start_activity(message.chat.id, 'learn')

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
def repeat_words(message):
    start_activity(message.chat.id, 'repeat')

@bot.message_handler(func=lambda message: message.text in ["üåê –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"])
def switch_dictionary(message):
    toggle_dictionary(message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('tr_', 'de_')))
def handle_pairs(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state or "pairs" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞'")
        return
    
    state = user_state[chat_id]
    
    # Immediate response for better UX
    if call.data.startswith('tr_'):
        selected_tr = call.data[3:]
        if state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚è≥ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
        state['selected_tr'] = selected_tr
        bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ: {selected_tr}", cache_time=1)
        return
    
    elif call.data.startswith('de_'):
        if not state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥")
            return
        
        selected_de = call.data[3:]
        correct = any(tr == state['selected_tr'] and de == selected_de for tr, de in state["pairs"])
        
        # Process result
        if correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", cache_time=1)
            
            # Update UI first for responsiveness
            markup = call.message.reply_markup
            for row in markup.keyboard:
                for btn in row:
                    if btn.callback_data in [f'tr_{state["selected_tr"]}', f'de_{selected_de}']:
                        btn.text += " ‚úÖ"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            
            # Track progress
            if "found_pairs" not in state:
                state["found_pairs"] = []
            state["found_pairs"].append((state['selected_tr'], selected_de))
            
            # Get dataframe and update priority (defer intensive operations)
            df = get_dataframe(chat_id)
            df.loc[df['translation'] == state['selected_tr'], 'priority'] -= 0.001
            
            # Check if finished all pairs
            if len(state["found_pairs"]) == len(state["pairs"]):
                bot.delete_message(chat_id, call.message.message_id)
                learn_words(call.message)
            else:
                # Save dataframe and reset selection state
                file_path, lang = get_user_file_path(chat_id) if state["dict_type"] == "personal" else (None, None)
                save_dataframe(chat_id, df, lang if lang else "common")
                state['selected_tr'] = None
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", cache_time=1)
            df = get_dataframe(chat_id)
            df.loc[df['translation'] == state['selected_tr'], 'priority'] += 0.001
            file_path, lang = get_user_file_path(chat_id) if state["dict_type"] == "personal" else (None, None)
            save_dataframe(chat_id, df, lang if lang else "common")
            state['selected_tr'] = None

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏'")
        return
    
    _, word, selected_tr = call.data.split('_')
    correct_tr = user_state[chat_id]["current_word"]['translation']
    
    df = get_dataframe(chat_id)
    if selected_tr == correct_tr:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        df.loc[df['word'] == word, 'priority'] -= 0.001
        bot.delete_message(chat_id, call.message.message_id)
        repeat_words(call.message)
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tr}")
        df.loc[df['word'] == word, 'priority'] += 0.001
        markup = call.message.reply_markup
        for row in markup.keyboard:
            if row[0].callback_data == call.data:
                row[0].text += " ‚ùå"
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
    
    file_path, lang = get_user_file_path(chat_id) if user_state[chat_id].get("dict_type") == "personal" else (None, None)
    save_dataframe(chat_id, df, lang if lang else "common")

@bot.message_handler(commands=['fire'])
def test_fire(message):
    if message.from_user.id == ADMIN_ID:
        try:
            from scheduler import send_reminder
            send_reminder()
            bot.reply_to(message, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ /fire: {e}")
            bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    if message.from_user.id == ADMIN_ID:
        bot.stop_polling()
        scheduler.shutdown(wait=False)
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ!")
        exit(0)

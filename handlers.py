# -*- coding: utf-8 -*-
import random
import telebot
import pandas as pd
import os
import sqlite3  # –î–æ–¥–∞–Ω–æ —Ü–µ–π —Ä—è–¥–æ–∫
from config import bot, translator, user_state, ADMIN_ID, DEBUG_MODE, scheduler
from utils import clear_state, track_activity, main_menu_keyboard, main_menu_cancel, language_selection_keyboard, easy_level_keyboard, shared_dictionary_keyboard
from storage import get_dataframe, save_dataframe, get_user_file_path, get_common_file_path
from dictionary import save_word, toggle_dictionary, start_activity, return_to_appropriate_menu, set_dictionary_type

# Import debug logger if debug mode is enabled
if DEBUG_MODE:
    from debug_logger import log_handler, log_message, log_response, log_error

def start_learning(chat_id, df):
    """Start learning new words activity"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    level = user_state.get(chat_id, {}).get("level", "easy")
    print(f"Debug: start_learning for user {chat_id}, dict_type={dict_type}, level={level}")
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —ñ –ø–æ–¥—ñ–ª—è—î–º–æ –Ω–∞ –≥—Ä—É–ø–∏ –¥–ª—è –∑–≤–∞–∂–µ–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É
    df = df.sort_values(by="priority", ascending=True)
    
    # –î—ñ–ª–∏–º–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ç—Ä–∏ –≥—Ä—É–ø–∏ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º (–º–µ–Ω—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –≤–∞–∂—á–µ —Å–ª–æ–≤–æ)
    total_words = len(df)
    if total_words >= 30:
        # –Ø–∫—â–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–ª—ñ–≤, –±–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ —Å–ª—ñ–≤ –∑ –Ω–∏–∂—á–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        group_low = df.iloc[:int(total_words * 0.5)]  # 50% —Å–ª—ñ–≤ –∑ –Ω–∏–∂—á–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        group_mid = df.iloc[int(total_words * 0.5):int(total_words * 0.8)]  # 30% —Å–µ—Ä–µ–¥–Ω—ñ—Ö
        group_high = df.iloc[int(total_words * 0.8):]  # 20% –∑ –≤–∏—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –±—ñ–ª—å—à–µ —Å–ª—ñ–≤ –∑ –≥—Ä—É–ø–∏ –∑ –Ω–∏–∂—á–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        words_low = group_low.sample(min(6, len(group_low)))
        words_mid = group_mid.sample(min(3, len(group_mid)))
        words_high = group_high.sample(min(1, len(group_high)))
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤–∏–±—Ä–∞–Ω—ñ —Å–ª–æ–≤–∞
        words = pd.concat([words_low, words_mid, words_high])
    else:
        # –î–ª—è –º–∞–ª–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª—ñ–≤ –ø—Ä–æ—Å—Ç–æ –∑–≤–∞–∂—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä
        # –Ü–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–≥ (–Ω–∏–∂—á–∏–π —Ä–µ–π—Ç–∏–Ω–≥ = –≤–∏—â–∞ –≤–∞–≥–∞)
        weights = 5.0 - df['priority']  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ 0 –¥–æ 5
        weights = weights.clip(0.1, 5.0)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –Ω—É–ª—å–æ–≤–∏–º –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º –≤–∞–≥–∞–º
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∞–∂–µ–Ω–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä
        words = df.sample(min(10, len(df)), weights=weights)
    
    # –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥-–Ω—ñ–º–µ—Ü—å–∫–µ —Å–ª–æ–≤–æ
    pairs = []
    for _, row in words.iterrows():
        translation = row['translation']
        german_word = row['word']
        
        # –§–æ—Ä–º—É—î–º–æ –Ω—ñ–º–µ—Ü—å–∫–µ —Å–ª–æ–≤–æ –∑ –∞—Ä—Ç–∏–∫–ª–µ–º, —è–∫—â–æ –≤—ñ–Ω —î
        if pd.notna(row['article']) and row['article'] != '':
            german_display = f"{row['article']} {german_word}"
        else:
            german_display = german_word
            
        pairs.append((translation, german_display, row['id']))
    
    # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä
    random.shuffle(pairs)
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–∞—Ä–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    translations = [pair[0] for pair in pairs]
    de_words = [pair[1] for pair in pairs]
    
    # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –æ–∫—Ä–µ–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    shuffled_translations = translations.copy()
    shuffled_de_words = de_words.copy()
    random.shuffle(shuffled_translations)
    random.shuffle(shuffled_de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(translations, de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ª–æ–≤–∞
    user_state[chat_id] = {
        "pairs": [(tr, de) for tr, de, _ in pairs],  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∏ –±–µ–∑ ID
        "word_ids": {tr: wid for tr, _, wid in pairs},  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ —Ç–∞ ID —Å–ª—ñ–≤
        "selected_tr": None,
        "message_id": None,
        "dict_type": dict_type,
        "level": level,
        "original_words": words
    }
    
    sent_message = bot.send_message(chat_id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[chat_id]["message_id"] = sent_message.message_id
    return True

def start_repetition(chat_id, df):
    """Start repetition activity"""
    if df is None or len(df) < 1:
        bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")
        return False
        
    try:
        dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
        level = user_state.get(chat_id, {}).get("level", "easy")
        
        # –ó–≤–∞–∂–µ–Ω–∏–π –≤–∏–±—ñ—Ä —Å–ª–æ–≤–∞ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (–Ω–∏–∂—á–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç = –≤–∏—â–∞ –≤–∞–≥–∞)
        weights = 5.0 - df['priority']  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤—ñ–¥ 0 –¥–æ 5
        weights = weights.clip(0.1, 5.0)  # –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –Ω—É–ª—å–æ–≤–∏–º –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º –≤–∞–≥–∞–º
        
        word = df.sample(1, weights=weights).iloc[0]
        
        sample_size = min(3, len(df))
        translations = df['translation'].sample(sample_size).tolist()
        if word['translation'] not in translations:
            translations[0] = word['translation']
        random.shuffle(translations)
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–æ –∑ –∞—Ä—Ç–∏–∫–ª–µ–º –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        display_word = word['word']
        if pd.notna(word['article']) and word['article'] != '':
            display_word = f"{word['article']} {word['word']}"
        
        markup = telebot.types.InlineKeyboardMarkup()
        for tr in translations:
            markup.add(telebot.types.InlineKeyboardButton(
                tr, 
                callback_data=f"ans_{word['word']}_{tr}"
            ))
        
        sent_message = bot.send_message(chat_id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {display_word}", reply_markup=markup)
        user_state[chat_id] = {
            "current_word": word,
            "message_id": sent_message.message_id,
            "dict_type": dict_type,
            "level": level
        }
        return True
    except Exception as e:
        print(f"Error in start_repetition: {e}")
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")
        return False

def start_article_activity(chat_id):
    """Start learning articles activity"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug: Starting article activity for user {chat_id} with dict_type={dict_type}, shared_dict_id={shared_dict_id}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ, —è–∫–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ
        last_word_id = user_state.get(chat_id, {}).get("last_article_word_id", None)
        
        import db_manager
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        language = db_manager.get_user_language(chat_id) or "uk"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏, –≤–∏–∫–ª—é—á–∞—é—á–∏ –∞—Ä—Ç–∏–∫–ª—å –∑ ID=4 (–ø–æ—Ä–æ–∂–Ω—ñ–π) 
        # —ñ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–∫–∞–∑–∞–Ω–µ —Å–ª–æ–≤–æ
        if dict_type == "shared" and shared_dict_id:
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç
            print(f"Getting articles from shared dictionary {shared_dict_id}")
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM shared_dict_{shared_dict_id} sd
            JOIN words w ON sd.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ
                query = f"""
                SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
                FROM shared_dict_{shared_dict_id} sd
                JOIN words w ON sd.word_id = w.id
                JOIN article a ON w.article_id = a.id
                WHERE w.article_id != 4 AND w.article_id IS NOT NULL
                ORDER BY RANDOM()
                LIMIT 20
                """
                cursor.execute(query)
                results = cursor.fetchall()
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            import random
            if results:
                result = random.choice(results)
                word_id, word, correct_article, article_id, translation = result
            else:
                result = None
                
        elif dict_type == "common":
            # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à–µ –≤–∏–ø–∞–¥–∫–æ–≤–æ—Å—Ç—ñ
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM words w
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ
                query = f"""
                SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
                FROM words w
                JOIN article a ON w.article_id = a.id
                WHERE w.article_id != 4 AND w.article_id IS NOT NULL
                ORDER BY RANDOM()
                LIMIT 20
                """
                cursor.execute(query)
                results = cursor.fetchall()
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            import random
            if results:
                result = random.choice(results)
                word_id, word, correct_article, article_id, translation = result
            else:
                result = None
        else:
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –±–µ—Ä–µ–º–æ –±—ñ–ª—å—à–µ —Å–ª—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, u.rating
            FROM user_{chat_id} u
            JOIN words w ON u.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY u.rating ASC
            LIMIT 15
            """
            cursor.execute(query)
            
            results = cursor.fetchall()
            if not results:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ
                query = f"""
                SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, u.rating
                FROM user_{chat_id} u
                JOIN words w ON u.word_id = w.id
                JOIN article a ON w.article_id = a.id
                WHERE w.article_id != 4 AND w.article_id IS NOT NULL
                ORDER BY u.rating ASC
                LIMIT 15
                """
                cursor.execute(query)
                results = cursor.fetchall()
            
            if not results:
                bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
                return_to_appropriate_menu(chat_id, False, "–£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
                conn.close()
                return False
            
            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ, –∑ –ø–µ—Ä–µ–≤–∞–≥–æ—é –¥–ª—è —Å–ª—ñ–≤ –∑ –Ω–∏–∑—å–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω—ñ –≤–∞–≥–∏ –¥–ª—è –±—ñ–ª—å—à–æ—ó —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            import random
            import math
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞–≥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –±—ñ–ª—å—à–æ–≥–æ —Ä–æ–∑–º–∞—Ö—É
            weights = [math.exp(3 * (5.0 - min(result[5], 5.0)) / 5.0) for result in results]
            chosen_index = random.choices(range(len(results)), weights=weights, k=1)[0]
            result = results[chosen_index]
            
            word_id, word, correct_article, article_id, translation, _ = result
        
        conn.close()
        
        if not result:
            bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return_to_appropriate_menu(chat_id, False, "–£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return False
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–æ–≤–∞, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É
        user_state[chat_id] = {
            "word_id": word_id,
            "word": word,
            "correct_article": correct_article,
            "dict_type": dict_type,
            "level": "easy",
            "translation": translation,
            "last_article_word_id": word_id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=3)
        markup.add(
            telebot.types.InlineKeyboardButton("der", callback_data=f"art_der_{word_id}"),
            telebot.types.InlineKeyboardButton("die", callback_data=f"art_die_{word_id}"),
            telebot.types.InlineKeyboardButton("das", callback_data=f"art_das_{word_id}")
        )
        
        sent_message = bot.send_message(
            chat_id,
            f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è —Å–ª–æ–≤–∞:\n\n<b>{word}</b>\n\n<i>–ü–µ—Ä–µ–∫–ª–∞–¥: {translation}</i>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        user_state[chat_id]["message_id"] = sent_message.message_id
        return True
        
    except Exception as e:
        print(f"Error in start_article_activity: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤.")
        return False

@bot.callback_query_handler(func=lambda call: call.data.startswith("art_"))
def handle_article_selection(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ'")
        return
    
    try:
        state = user_state[chat_id]
        word_id = state.get("word_id")
        correct_article = state.get("correct_article")
        word = state.get("word")
        dict_type = state.get("dict_type", "personal")
        
        # –ü–∞—Ä—Å–∏–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å
        _, selected_article, word_id_from_callback = call.data.split('_')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        is_correct = selected_article == correct_article
        
        if is_correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞
            try:
                import db_manager
                if dict_type == "personal":
                    db_manager.update_word_rating(chat_id, word_id, 0.1, dict_type)
                    print(f"Successfully increased rating for word_id={word_id}")
            except Exception as e:
                print(f"Error updating word rating: {e}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
            bot.edit_message_text(
                f"üè∑Ô∏è <b>{correct_article} {word}</b>\n\n<i>‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!</i>",
                chat_id,
                call.message.message_id,
                parse_mode="HTML"
            )
        else:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_article}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ (–∑–Ω–∏–∂—É—î–º–æ)
            try:
                import db_manager
                if dict_type == "personal":
                    db_manager.update_word_rating(chat_id, word_id, -0.1, dict_type)
                    print(f"Successfully decreased rating for word_id={word_id}")
            except Exception as e:
                print(f"Error updating word rating: {e}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
            bot.edit_message_text(
                f"üè∑Ô∏è <b>{correct_article} {word}</b>\n\n<i>‚ùå –ó–∞–ø–∞–º'—è—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å.</i>",
                chat_id,
                call.message.message_id,
                parse_mode="HTML"
            )
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ", callback_data="next_article"))
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
        
    except Exception as e:
        print(f"Error in handle_article_selection: {e}")
        import traceback
        traceback.print_exc()
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        try:
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–≤—ñ—Ç—å —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("‚û°Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à–µ —Å–ª–æ–≤–æ", callback_data="next_article"))
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
        except:
            pass

# –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—ñ—Å–ª—è —Ç–∞–π–º–∞—É—Ç—É
def continue_article_activity(chat_id, message_id):
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.delete_message(chat_id, message_id)
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏
        start_article_activity(chat_id)
    except Exception as e:
        print(f"Error in continue_article_activity: {e}")
        try:
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.")
        except:
            pass

# –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞—Ä–∏–π handler –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, 
# –∞–ª–µ –≤—ñ–Ω –Ω–µ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è
@bot.callback_query_handler(func=lambda call: call.data == "next_article")
def handle_next_article(call):
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    start_article_activity(chat_id)

@bot.message_handler(func=lambda message: message.text == "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫" or 
                    message.text.startswith("üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"))
@log_handler
def shared_dictionary_menu(message):
    """Show shared dictionary menu"""
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    import db_manager
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
    result = cursor.fetchone()
    
    if result and result[0]:
        # –Ø–∫—â–æ –≤–∂–µ —î –≤–∏–±—Ä–∞–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω—å–æ–≥–æ
        shared_dict_id = result[0]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id in user_state:
            user_state[chat_id].update({"dict_type": "shared", "shared_dict_id": shared_dict_id})
        else:
            user_state[chat_id] = {"dict_type": "shared", "shared_dict_id": shared_dict_id}
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ª–æ–≤–Ω–∏–∫
        cursor.execute("SELECT name FROM shared_dictionaries WHERE id = ?", (shared_dict_id,))
        dict_name = cursor.fetchone()[0]
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
        bot.send_message(
            chat_id,
            f"üìö –û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: <b>{dict_name}</b>",
            parse_mode="HTML",
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
        db_manager.create_shared_dictionary_tables()
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        bot.send_message(chat_id, "üë• –°–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ - –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                        reply_markup=shared_dictionary_keyboard())
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if chat_id in user_state:
            user_state[chat_id].update({"dict_type": "shared"})
        else:
            user_state[chat_id] = {"dict_type": "shared"}
    
    conn.close()

@bot.message_handler(func=lambda message: message.text == "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫" or 
                    message.text.startswith("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫"))
@log_handler
def personal_dictionary_button(message):
    """Switch to personal dictionary"""
    chat_id = message.chat.id
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è shared_dict_id
    import db_manager
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET shared_dict_id = NULL WHERE chat_id = ?", (chat_id,))
    conn.commit()
    conn.close()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤ –ø–∞–º'—è—Ç—ñ
    if chat_id in user_state:
        user_state[chat_id].update({"dict_type": "personal"})
        if "shared_dict_id" in user_state[chat_id]:
            del user_state[chat_id]["shared_dict_id"]
    else:
        user_state[chat_id] = {"dict_type": "personal"}
    
    bot.send_message(chat_id, "üìö –û–±—Ä–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫.",
                    reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
@log_handler
def create_shared_dictionary(message):
    """Create a new shared dictionary"""
    chat_id = message.chat.id
    clear_state(chat_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state[chat_id] = {
        "step": "creating_shared_dict",
    }
    
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞:",
                    reply_markup=main_menu_cancel())

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "creating_shared_dict")
@log_handler
def handle_shared_dict_name(message):
    """Handle shared dictionary name input"""
    chat_id = message.chat.id
    
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))
        return
    
    dict_name = message.text.strip()
    
    if len(dict_name) < 3 or len(dict_name) > 30:
        bot.send_message(chat_id, "‚ùå –ù–∞–∑–≤–∞ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 3 –¥–æ 30 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    import db_manager
    code, shared_dict_id = db_manager.create_shared_dictionary(chat_id, dict_name)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É
    bot.send_message(
        chat_id,
        f"‚úÖ –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ '{dict_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
        f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø—É: <code>{code}</code>\n\n"
        f"–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –∫–æ–¥–æ–º –∑ –¥—Ä—É–∑—è–º–∏, —â–æ–± –≤–æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–∞—à–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard(chat_id)
    )
    
    clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "üîë –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞")
@log_handler
def join_shared_dictionary(message):
    """Join an existing shared dictionary"""
    chat_id = message.chat.id
    clear_state(chat_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state[chat_id] = {
        "step": "joining_shared_dict",
    }
    
    bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞:",
                    reply_markup=main_menu_cancel())

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "joining_shared_dict")
@log_handler
def handle_shared_dict_code(message):
    """Handle shared dictionary code input"""
    chat_id = message.chat.id
    
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))
        return
    
    code = message.text.strip().upper()
    
    if len(code) != 6:
        bot.send_message(chat_id, "‚ùå –ö–æ–¥ –¥–æ—Å—Ç—É–ø—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    # –ü—Ä–∏—î–¥–Ω—É—î–º–æ—Å—å –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    import db_manager
    success, result = db_manager.join_shared_dictionary(chat_id, code)
    
    if success:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        bot.send_message(
            chat_id,
            f"‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ '{result}'!",
            reply_markup=main_menu_keyboard(chat_id)
        )
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        bot.send_message(chat_id, f"‚ùå {result}")
    
    clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ—ó —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏")
@log_handler
def my_shared_dictionaries(message):
    """Show user's shared dictionaries"""
    chat_id = message.chat.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    import db_manager
    shared_dicts = db_manager.get_user_shared_dictionaries(chat_id)
    
    if not shared_dicts:
        bot.send_message(
            chat_id,
            "üì≠ –í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –∂–æ–¥–Ω–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞.",
            reply_markup=shared_dictionary_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    response = "üìã –í–∞—à—ñ —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏:\n\n"
    
    for dict_info in shared_dicts:
        admin_status = "üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if dict_info['is_admin'] else "üë§ –£—á–∞—Å–Ω–∏–∫"
        response += f"‚Ä¢ <b>{dict_info['name']}</b> ({admin_status})\n"
        response += f"  –ö–æ–¥ –¥–æ—Å—Ç—É–ø—É: <code>{dict_info['code']}</code>\n\n"
    
    response += "–û–±–µ—Ä—ñ—Ç—å —Å–ª–æ–≤–Ω–∏–∫, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ª–æ–≤–Ω–∏–∫–∞
    markup = telebot.types.InlineKeyboardMarkup()
    
    for dict_info in shared_dicts:
        admin_icon = "üëë" if dict_info['is_admin'] else "üë§"
        button_text = f"{admin_icon} {dict_info['name']}"
        markup.add(telebot.types.InlineKeyboardButton(
            button_text, 
            callback_data=f"use_shared_dict_{dict_info['id']}"
        ))
    
    bot.send_message(
        chat_id,
        response,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("use_shared_dict_"))
def use_shared_dictionary(call):
    """Switch to a specific shared dictionary"""
    chat_id = call.message.chat.id
    shared_dict_id = int(call.data.replace("use_shared_dict_", ""))
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    import db_manager
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET shared_dict_id = ? WHERE chat_id = ?', 
                 (shared_dict_id, chat_id))
    conn.commit()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    cursor.execute('SELECT name FROM shared_dictionaries WHERE id = ?', (shared_dict_id,))
    dict_name = cursor.fetchone()[0]
    conn.close()
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ø–∞–º'—è—Ç—ñ
    if chat_id in user_state:
        user_state[chat_id].update({"dict_type": "shared", "shared_dict_id": shared_dict_id})
    else:
        user_state[chat_id] = {"dict_type": "shared", "shared_dict_id": shared_dict_id}
    
    bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: {dict_name}")
    bot.delete_message(chat_id, call.message.message_id)
    
    bot.send_message(
        chat_id,
        f"üìö –û–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫: <b>{dict_name}</b>\n"
        f"–¢–µ–ø–µ—Ä –≤—Å—ñ –¥—ñ—ó –±—É–¥—É—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å —É —Ü—å–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard(chat_id)
    )

@bot.message_handler(commands=["start"])
def main_menu(message):
    """Initial start command handler - simplified for reliability"""
    chat_id = message.chat.id
    clear_state(chat_id)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    import db_manager
    language = db_manager.get_user_language(chat_id)
    
    track_activity(chat_id)
    
    if not language:
        bot.send_message(chat_id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", 
                         reply_markup=language_selection_keyboard())
        user_state[chat_id] = {"step": "language_selection"}
    else:
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                         reply_markup=main_menu_keyboard(chat_id))

# Simplify level selection handlers to ensure they work reliably
@bot.message_handler(func=lambda message: message.text == "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å")
def easy_level(message):
    """Show easy level menu with learning activities"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "easy"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "easy"}
    
    from utils import easy_level_keyboard
    bot.send_message(chat_id, "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å - –æ–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:", 
                   reply_markup=easy_level_keyboard())

@bot.message_handler(func=lambda message: message.text == "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å")
def medium_level(message):
    """Show medium level menu (placeholder)"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "medium"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "medium"}
    
    # Show "under development" message
    bot.send_message(chat_id, "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å.", 
                   reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å")
def hard_level(message):
    """Show hard level menu (placeholder)"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Update user state
    if chat_id in user_state:
        user_state[chat_id]["level"] = "hard"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "hard"}
    
    # Show "under development" message
    bot.send_message(chat_id, "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å.", 
                   reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
def return_to_main_menu(message):
    """Return to main menu"""
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Preserve dictionary type but remove level information
    if chat_id in user_state:
        user_state[chat_id] = {"dict_type": dict_type}
    
    # Send main menu
    bot.send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", 
                   reply_markup=main_menu_keyboard(chat_id))
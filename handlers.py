# -*- coding: utf-8 -*-
import random
import telebot
import pandas as pd
import os
import sqlite3  # –î–æ–¥–∞–Ω–æ —Ü–µ–π —Ä—è–¥–æ–∫
from config import bot, translator, user_state, ADMIN_ID, DEBUG_MODE, scheduler
from utils import clear_state, track_activity, main_menu_keyboard, main_menu_cancel, language_selection_keyboard, easy_level_keyboard
from storage import get_dataframe, save_dataframe, get_user_file_path, get_common_file_path
from dictionary import save_word, toggle_dictionary, start_activity, return_to_appropriate_menu

# Import debug logger if debug mode is enabled
if DEBUG_MODE:
    from debug_logger import log_handler, log_message, log_response, log_error

def start_learning(chat_id, df):
    """Start learning new words activity"""
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    level = user_state.get(chat_id, {}).get("level", "easy")
    print(f"Debug: start_learning for user {chat_id}, dict_type={dict_type}, level={level}")
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤ –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è, —â–æ–± –º–µ–Ω—à—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏ (–≤–∞–∂—á—ñ —Å–ª–æ–≤–∞) –π—à–ª–∏ –ø–µ—Ä—à–∏–º–∏
    df = df.sort_values(by="priority", ascending=True)
    words = df.sample(min(10, len(df)))
    
    # –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥-–Ω—ñ–º–µ—Ü—å–∫–µ —Å–ª–æ–≤–æ
    pairs = []
    for _, row in words.iterrows():
        translation = row['translation']
        german_word = row['word']
        
        # –§–æ—Ä–º—É—î–º–æ –Ω—ñ–º–µ—Ü—å–∫–µ —Å–ª–æ–≤–æ –∑ –∞—Ä—Ç–∏–∫–ª–µ–º, —è–∫—â–æ –≤—ñ–Ω —î
        if pd.notna(row['article']) and row['article'] != '':
            german_display = f"{row['article']} {german_word}"
        else:
            german_display = german_word
            
        pairs.append((translation, german_display, row['id']))
    
    # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä
    random.shuffle(pairs)
    
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–∞—Ä–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    translations = [pair[0] for pair in pairs]
    de_words = [pair[1] for pair in pairs]
    
    # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –æ–∫—Ä–µ–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    shuffled_translations = translations.copy()
    shuffled_de_words = de_words.copy()
    random.shuffle(shuffled_translations)
    random.shuffle(shuffled_de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(shuffled_translations, shuffled_de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ª–æ–≤–∞
    user_state[chat_id] = {
        "pairs": [(tr, de) for tr, de, _ in pairs],  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∏ –±–µ–∑ ID
        "word_ids": {tr: wid for tr, _, wid in pairs},  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏ —Ç–∞ ID —Å–ª—ñ–≤
        "selected_tr": None,
        "message_id": None,
        "dict_type": dict_type,
        "level": level,
        "original_words": words
    }
    
    sent_message = bot.send_message(chat_id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[chat_id]["message_id"] = sent_message.message_id
    return True

def start_repetition(chat_id, df):
    """Start repetition activity"""
    if df is None or len(df) < 1:
        bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")
        return False
        
    try:
        dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
        level = user_state.get(chat_id, {}).get("level", "easy")
        
        word = df.sample(1).iloc[0]
        sample_size = min(3, len(df))
        translations = df['translation'].sample(sample_size).tolist()
        if word['translation'] not in translations:
            translations[0] = word['translation']
        random.shuffle(translations)
        
        # –§–æ—Ä–º—É—î–º–æ —Å–ª–æ–≤–æ –∑ –∞—Ä—Ç–∏–∫–ª–µ–º –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        display_word = word['word']
        if pd.notna(word['article']) and word['article'] != '':
            display_word = f"{word['article']} {word['word']}"
        
        markup = telebot.types.InlineKeyboardMarkup()
        for tr in translations:
            markup.add(telebot.types.InlineKeyboardButton(
                tr, 
                callback_data=f"ans_{word['word']}_{tr}"
            ))
        
        sent_message = bot.send_message(chat_id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {display_word}", reply_markup=markup)
        user_state[chat_id] = {
            "current_word": word,
            "message_id": sent_message.message_id,
            "dict_type": dict_type,
            "level": level
        }
        return True
    except Exception as e:
        print(f"Error in start_repetition: {e}")
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")
        return False

@bot.message_handler(commands=["start"])
@log_handler
def main_menu(message):
    clear_state(message.chat.id)
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    import db_manager
    language = db_manager.get_user_language(message.chat.id)
    
    track_activity(message.chat.id)
    
    if not language:
        bot.send_message(message.chat.id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", 
                         reply_markup=language_selection_keyboard())
        user_state[message.chat.id] = {"step": "language_selection"}
    else:
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                         reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"])
@log_handler
def handle_language_selection(message):
    chat_id = message.chat.id
    if user_state.get(chat_id, {}).get("step") == "language_selection":
        language = "uk" if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "ru"
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        import db_manager
        db_manager.set_user_language(chat_id, language)
        
        bot.send_message(chat_id, f"‚úÖ –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–±—Ä–∞–Ω–æ: {message.text}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏–≤—á–∞—Ç–∏ —ó—Ö.", 
                         reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
@log_handler
def add_word(message):
    chat_id = message.chat.id
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    print(f"Debug: Add word request from user {chat_id}, dict_type={dict_type}")
    
    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–æ –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    if dict_type == "common" and chat_id != ADMIN_ID:
        bot.send_message(
            chat_id, 
            "‚ùå –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ, –∑–º—ñ–Ω—ñ—Ç—å —Å–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π.",
            reply_markup=main_menu_keyboard(chat_id)
        )
        return
    
    # –î–ª—è –∞–¥–º—ñ–Ω–∞ —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
    clear_state(chat_id)
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state[chat_id] = {
        "step": "adding_word",
        "dict_type": dict_type  # –í–∞–∂–ª–∏–≤–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –æ–±—Ä–∞–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    }
    
    bot.send_message(
        chat_id, 
        "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:", 
        reply_markup=main_menu_cancel()
    )

@bot.message_handler(func=lambda message: message.text == "–í—ñ–¥–º—ñ–Ω–∞")
@log_handler
def cancel_action(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "adding_word")
@log_handler
def handle_translation(message):
    if not message.text or message.text.startswith('/'):
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç–æ–º!")
        return
        
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
        
    word = message.text.strip()
    dict_type = user_state.get(message.chat.id, {}).get("dict_type", "personal")
    print(f"Debug: User {message.chat.id} adding word to dictionary type: {dict_type}")
    
    # –ü–æ—à—É–∫ –∞—Ä—Ç–∏–∫–ª—è —É –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö –Ω—ñ–º–µ—Ü—å–∫–∏—Ö —Å–ª—ñ–≤
    from german_article_finder import find_german_article
    article, clean_word = find_german_article(word)
    if article:
        print(f"Found article '{article}' for word '{word}' -> '{clean_word}'")
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ original_word –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_state[message.chat.id]["original_word"] = word
        # –ê word –±—É–¥–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º —Å–ª–æ–≤–æ–º –∑ –∞—Ä—Ç–∏–∫–ª–µ–º
        word = f"{article} {clean_word}"
    
    # –ó–±–µ—Ä–µ–∂–µ–º–æ dict_type –¥–ª—è –≤—Å—ñ—Ö –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤
    user_state[message.chat.id]["dict_type"] = dict_type
    
    if dict_type == "common" and message.chat.id != ADMIN_ID:
        bot.send_message(
            message.chat.id, 
            "‚ùå –î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ, –∑–º—ñ–Ω—ñ—Ç—å —Å–≤—ñ–π —Å–ª–æ–≤–Ω–∏–∫ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π.",
            reply_markup=main_menu_keyboard(message.chat.id)
        )
        clear_state(message.chat.id)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    import db_manager
    language = db_manager.get_user_language(message.chat.id)
    
    if not language:
        bot.send_message(message.chat.id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
        return
    
    print(f"Debug: Translating word '{word}' using language code '{language}'")
    translation = translator.translate(word, src="de", dest=language).text
    
    if translation:
        user_state[message.chat.id].update({
            "step": "confirm_translation",
            "word": word,
            "auto_translation": translation,
            "language": language  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        })
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–¢–∞–∫", "–ù—ñ", "–í—ñ–¥–º—ñ–Ω–∞")
        bot.send_message(message.chat.id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {translation}. –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "confirm_translation")
@log_handler
def handle_confirmation(message):
    if message.text == "–¢–∞–∫":
        # –§—É–Ω–∫—Ü—ñ—è save_word –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        save_word(message.chat.id)
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    elif message.text == "–ù—ñ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É:", 
                        reply_markup=telebot.types.ReplyKeyboardRemove())
        user_state[message.chat.id]["step"] = "manual_translation"
    elif message.text == "–í—ñ–¥–º—ñ–Ω–∞":
        clear_state(message.chat.id)
        bot.send_message(message.chat.id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                        reply_markup=main_menu_keyboard(message.chat.id))
    else:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–í—ñ–¥–º—ñ–Ω–∞'.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "manual_translation")
@log_handler
def handle_manual_translation(message):
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(message.chat.id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
    
    # –§—É–Ω–∫—Ü—ñ—è save_word –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
    save_word(message.chat.id, message.text.strip())
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

@bot.message_handler(func=lambda message: message.text == "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞")
@log_handler
def learn_words(message):
    dict_type = user_state.get(message.chat.id, {}).get("dict_type", "personal")
    level = user_state.get(message.chat.id, {}).get("level", "easy")
    
    print(f"Debug: User {message.chat.id} learning with dictionary type: {dict_type}, level: {level}")
    
    if message.chat.id in user_state:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞, —ñ —Ä—ñ–≤–µ–Ω—å
        user_state[message.chat.id].update({
            "dict_type": dict_type,
            "level": level
        })
    else:
        user_state[message.chat.id] = {"dict_type": dict_type, "level": level}
    
    start_activity(message.chat.id, 'learn')

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
@log_handler
def repeat_words(message):
    dict_type = user_state.get(message.chat.id, {}).get("dict_type", "personal")
    level = user_state.get(message.chat.id, {}).get("level", "easy")
    
    print(f"Debug: User {message.chat.id} repeating with dictionary type: {dict_type}, level: {level}")
    
    if message.chat.id in user_state:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞, —ñ —Ä—ñ–≤–µ–Ω—å
        user_state[message.chat.id].update({
            "dict_type": dict_type,
            "level": level
        })
    else:
        user_state[message.chat.id] = {"dict_type": dict_type, "level": level}
    
    start_activity(message.chat.id, 'repeat')

@bot.callback_query_handler(func=lambda call: call.data.startswith(('tr_', 'de_')))
def handle_pairs(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state or "pairs" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞'")
        return
    
    state = user_state[chat_id]
    dict_type = state.get("dict_type", "personal")
    
    if call.data.startswith('tr_'):
        if state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚è≥ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
        state['selected_tr'] = call.data[3:]
        bot.answer_callback_query(call.id, f"–û–±—Ä–∞–Ω–æ: {state['selected_tr']}")
    
    elif call.data.startswith('de_'):
        if not state.get('selected_tr'):
            bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥")
            return
        
        selected_de = call.data[3:]
        selected_tr = state['selected_tr']
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: —á—ñ—Ç–∫–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
        print(f"DEBUG: Selected tr='{selected_tr}', de='{selected_de}'")
        print(f"DEBUG: Available pairs to match: {state['pairs']}")
        
        # –®—É–∫–∞—î–º–æ —Ç–æ—á–Ω—É –ø–∞—Ä—É –≤ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–∞—Ä–∞—Ö
        correct = (selected_tr, selected_de) in state["pairs"]
        
        print(f"DEBUG: Match {'found' if correct else 'not found'} for tr='{selected_tr}', de='{selected_de}'")
        
        if correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É —á–µ—Ä–µ–∑ SQLite - –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ä–µ–π—Ç–∏–Ω–≥ –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è –Ω–∞ 0.1
            try:
                import db_manager
                if "word_ids" in state and selected_tr in state["word_ids"]:
                    word_id = state["word_ids"][selected_tr]
                    db_manager.update_word_rating(chat_id, word_id, 0.1, dict_type)
                    print(f"Successfully increased rating for word_id={word_id}")
                else:
                    print("Error: word_id not found for translation")
            except Exception as e:
                print(f"Error updating word rating: {e}")
                import traceback
                traceback.print_exc()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            markup = call.message.reply_markup
            for row in markup.keyboard:
                for btn in row:
                    if btn.callback_data in [f'tr_{selected_tr}', f'de_{selected_de}']:
                        btn.text += " ‚úÖ"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            
            # –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ä–∏
            if "found_pairs" not in state:
                state["found_pairs"] = []
            state["found_pairs"].append((selected_tr, selected_de))
            
            print(f"DEBUG: Found pairs: {len(state['found_pairs'])}/{len(state['pairs'])}")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É, —è–∫—â–æ –≤—Å—ñ –ø–∞—Ä–∏ –∑–Ω–∞–π–¥–µ–Ω–æ
            if len(state["found_pairs"]) == len(state["pairs"]):
                bot.delete_message(chat_id, call.message.message_id)
                return_to_appropriate_menu(chat_id, True, "‚úÖ –í—ñ–¥–º—ñ–Ω–Ω–æ! –í—Å—ñ –ø–∞—Ä–∏ –∑'—î–¥–Ω–∞–Ω–æ!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            try:
                import db_manager
                if "word_ids" in state and selected_tr in state["word_ids"]:
                    word_id = state["word_ids"][selected_tr]
                    db_manager.update_word_rating(chat_id, word_id, -0.1, dict_type)
                    print(f"Successfully decreased rating for word_id={word_id}")
                else:
                    print("Error: word_id not found for translation")
            except Exception as e:
                print(f"Error updating word rating: {e}")
                import traceback
                traceback.print_exc()
        
        # –ó–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        state['selected_tr'] = None

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏'")
        return
    
    try:
        _, word, selected_tr = call.data.split('_')
        correct_tr = user_state[chat_id]["current_word"]['translation']
        dict_type = user_state[chat_id].get("dict_type", "personal")
        
        if selected_tr == correct_tr:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            try:
                import db_manager
                word_id = int(user_state[chat_id]["current_word"]['id'])
                db_manager.update_word_rating(chat_id, word_id, 0.1, dict_type)
                print(f"Successfully increased rating for word_id={word_id}")
            except Exception as e:
                print(f"Error updating word rating: {e}")
                
            bot.delete_message(chat_id, call.message.message_id)
            start_activity(chat_id, 'repeat')
        else:
            bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tr}")
            
            try:
                import db_manager
                word_id = int(user_state[chat_id]["current_word"]['id'])
                db_manager.update_word_rating(chat_id, word_id, -0.1, dict_type)
                print(f"Successfully decreased rating for word_id={word_id}")
            except Exception as e:
                print(f"Error updating word rating: {e}")
            
            markup = call.message.reply_markup
            for row in markup.keyboard:
                if row[0].callback_data == call.data:
                    row[0].text += " ‚ùå"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
            
    except Exception as e:
        print(f"Error in handle_answer: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")

@bot.message_handler(func=lambda message: message.text == "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å")
@log_handler
def easy_level(message):
    """Show easy level menu with basic learning activities"""
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä–µ–∂–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    if chat_id in user_state:
        user_state[chat_id]["level"] = "easy"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "easy"}
    
    bot.send_message(chat_id, "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å - –æ–±–µ—Ä—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:", 
                    reply_markup=easy_level_keyboard())

@bot.message_handler(func=lambda message: message.text == "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å")
@log_handler
def medium_level(message):
    """Show medium level menu (placeholder)"""
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —ñ —Ä—ñ–≤–µ–Ω—å
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    if chat_id in user_state:
        user_state[chat_id]["level"] = "medium"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "medium"}
    
    bot.send_message(chat_id, "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ", 
                    reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å")
@log_handler
def hard_level(message):
    """Show hard level menu (placeholder)"""
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —ñ —Ä—ñ–≤–µ–Ω—å
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    if chat_id in user_state:
        user_state[chat_id]["level"] = "hard"
    else:
        user_state[chat_id] = {"dict_type": dict_type, "level": "hard"}
    
    bot.send_message(chat_id, "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —É —Ä–æ–∑—Ä–æ–±—Ü—ñ", 
                    reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
@log_handler
def return_to_main_menu(message):
    """Return to main menu"""
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    if chat_id in user_state:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ä—ñ–≤–µ–Ω—å, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
        user_state[chat_id] = {"dict_type": dict_type}
    
    bot.send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", 
                    reply_markup=main_menu_keyboard(chat_id))

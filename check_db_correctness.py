#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
"""

import sqlite3
import json
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    import db_manager
    print("‚úÖ db_manager —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É db_manager: {e}")
    sys.exit(1)

def load_db_structure():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ JSON —Ñ–∞–π–ª—É"""
    try:
        with open('db_structure_20250624_154957.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î: {e}")
        return None

def check_table_references():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—å"""
    print("\nüìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—å...")
    
    structure = load_db_structure()
    if not structure:
        return False
    
    tables = structure.get('tables', {})
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    shared_dict_tables = [name for name in tables.keys() if name.startswith('shared_dict_') and name not in ['shared_dict_users']]
    user_tables = [name for name in tables.keys() if name.startswith('user_')]
    
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤: {len(shared_dict_tables)}")
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤: {len(user_tables)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    required_tables = ['words', 'users', 'article', 'shared_dictionaries', 'shared_dict_users']
    missing_tables = [table for table in required_tables if table not in tables]
    
    if missing_tables:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ: {missing_tables}")
        return False
    
    print("‚úÖ –í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
    return True

def check_function_existence():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
    print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π...")
    
    required_functions = [
        'get_shared_dictionary_words',
        'get_shared_dictionary_words_with_articles', 
        'get_user_shared_dictionaries',
        'delete_word_from_shared_dict',
        'delete_word_from_personal_dict',
        'update_word_translation_shared_dict',
        'update_word_translation_personal_dict',
        'add_word_to_shared_dictionary',
        'create_shared_dictionary',
        'join_shared_dictionary'
    ]
    
    missing_functions = []
    for func_name in required_functions:
        if not hasattr(db_manager, func_name):
            missing_functions.append(func_name)
        else:
            print(f"‚úÖ {func_name}")
    
    if missing_functions:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {missing_functions}")
        return False
    
    return True

def test_database_queries():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –ë–î...")
    
    try:
        # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        conn = sqlite3.connect(db_manager.DB_PATH)
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        actual_tables = [row[0] for row in cursor.fetchall()]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        shared_dicts = [t for t in actual_tables if t.startswith('shared_dict_') and t != 'shared_dict_users']
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —É –ë–î: {len(shared_dicts)}")
        
        for dict_table in shared_dicts[:3]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ 3
            cursor.execute(f"PRAGMA table_info({dict_table})")
            columns = [col[1] for col in cursor.fetchall()]
            print(f"  {dict_table}: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ–ª–æ–Ω–∫–∞ word_id
            if 'word_id' not in columns:
                print(f"‚ùå –£ —Ç–∞–±–ª–∏—Ü—ñ {dict_table} –≤—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ word_id")
            else:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü—è {dict_table} –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        user_tables = [t for t in actual_tables if t.startswith('user_') and '_' in t[5:]]
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ —É –ë–î: {len(user_tables)}")
        
        for user_table in user_tables[:3]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ 3
            cursor.execute(f"PRAGMA table_info({user_table})")
            columns = [col[1] for col in cursor.fetchall()]
            required_cols = ['id', 'word_id', 'rating']
            missing_cols = [col for col in required_cols if col not in columns]
            
            if missing_cols:
                print(f"‚ùå –£ —Ç–∞–±–ª–∏—Ü—ñ {user_table} –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            else:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü—è {user_table} –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–î: {e}")
        return False

def check_word_table_references():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—ñ words"""
    print("\nüìù –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ words...")
    
    try:
        conn = sqlite3.connect(db_manager.DB_PATH)
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ words
        cursor.execute("PRAGMA table_info(words)")
        columns = [col[1] for col in cursor.fetchall()]
        
        required_cols = ['id', 'word', 'article_id', 'uk_tran', 'ru_tran']
        missing_cols = [col for col in required_cols if col not in columns]
        
        if missing_cols:
            print(f"‚ùå –£ —Ç–∞–±–ª–∏—Ü—ñ words –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")
            return False
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü—è words –º–∞—î {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤
        cursor.execute("SELECT COUNT(*) FROM words")
        word_count = cursor.fetchone()[0]
        print(f"‚úÖ –£ —Ç–∞–±–ª–∏—Ü—ñ words {word_count} —Å–ª—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≤'—è–∑–∫–∏ –∑ article
        cursor.execute("""
        SELECT COUNT(*) FROM words w 
        LEFT JOIN article a ON w.article_id = a.id 
        WHERE w.article_id IS NOT NULL AND a.id IS NULL
        """)
        broken_links = cursor.fetchone()[0]
        
        if broken_links > 0:
            print(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ {broken_links} —Å–ª—ñ–≤ –∑ –Ω–µ–≤—ñ—Ä–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –∞—Ä—Ç–∏–∫–ª—ñ")
        else:
            print("‚úÖ –í—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞—Ä—Ç–∏–∫–ª—ñ –∫–æ—Ä–µ–∫—Ç–Ω—ñ")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ words: {e}")
        return False

def check_user_functions():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    print("\nüë§ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ä–µ–∞–ª—å–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        test_user_id = 476376623  # –ó JSON –≤–∏–¥–Ω–æ, —â–æ —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ get_user_language
        language = db_manager.get_user_language(test_user_id)
        if language:
            print(f"‚úÖ get_user_language –ø—Ä–∞—Ü—é—î: {language}")
        else:
            print("‚ö†Ô∏è get_user_language –ø–æ–≤–µ—Ä–Ω—É–ª–∞ None")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ get_user_dictionary_info
        dict_type, shared_dict_id, is_admin = db_manager.get_user_dictionary_info(test_user_id)
        print(f"‚úÖ get_user_dictionary_info: type={dict_type}, shared_id={shared_dict_id}, admin={is_admin}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ get_user_shared_dictionaries
        shared_dicts = db_manager.get_user_shared_dictionaries(test_user_id)
        print(f"‚úÖ get_user_shared_dictionaries: {len(shared_dicts)} —Å–ª–æ–≤–Ω–∏–∫—ñ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def run_all_checks():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    print("=" * 60)
    
    checks = [
        ("–ó–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ —Ç–∞–±–ª–∏—Ü—å", check_table_references),
        ("–ù–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π", check_function_existence),
        ("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –ë–î", test_database_queries),
        ("–¢–∞–±–ª–∏—Ü—è words", check_word_table_references),
        ("–§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", check_user_functions)
    ]
    
    results = []
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå {check_name} - –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            results.append((check_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"{status} {check_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø—Ä–æ–±–ª–µ–º–∏ –≤–∏—â–µ.")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_checks()
    sys.exit(0 if success else 1)

# -*- coding: utf-8 -*-
import os
import json
import telebot
import pandas as pd
from datetime import datetime
from config import bot, user_state, ADMIN_ID

def clear_state(chat_id, preserve_dict_type=False):
    """Clear user state and delete message if exists
    
    Args:
        chat_id: User's chat ID
        preserve_dict_type: If True, preserve the dict_type setting for this user
    """
    if chat_id in user_state:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ 
        dict_type = None
        if preserve_dict_type and "dict_type" in user_state[chat_id]:
            dict_type = user_state[chat_id]["dict_type"]
            
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î
        if "message_id" in user_state[chat_id]:
            try:
                bot.delete_message(chat_id, user_state[chat_id]["message_id"])
            except:
                pass
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ user_state
        del user_state[chat_id]
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if preserve_dict_type and dict_type:
            user_state[chat_id] = {"dict_type": dict_type}
            print(f"Debug: Preserved dictionary type '{dict_type}' for user {chat_id}")

def get_user_params_path(chat_id):
    """Get path to user parameters file"""
    return f"params_{chat_id}.json"

def update_streak(chat_id):
    """Update user streak and return current streak count"""
    params_path = get_user_params_path(chat_id)
    
    try:
        with open(params_path, 'r') as f:
            params = json.load(f)
    except FileNotFoundError:
        params = {'streak': 0, 'last_active': None}
        
    today = datetime.now().date().isoformat()
    last_active = datetime.fromisoformat(params['last_active']).date() if params['last_active'] else None
    
    if last_active:
        delta = (datetime.now().date() - last_active).days
        if delta == 1:
            params['streak'] += 1
        elif delta > 1:
            params['streak'] = 1
    else:
        params['streak'] = 1
        
    params['last_active'] = today
    with open(params_path, 'w') as f:
        json.dump(params, f)
    return params['streak']

def track_activity(chat_id):
    """Track user activity and update streak"""
    params_path = get_user_params_path(chat_id)
    
    # Create file if not exists
    if not os.path.exists(params_path):
        update_streak(chat_id)
        
    return update_streak(chat_id)

def main_menu_keyboard(chat_id=None):
    """Create main menu keyboard with dictionary selection"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # Add dictionary selector button
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ" —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ 
    # –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫
    if dict_type == "personal" or (chat_id == ADMIN_ID and dict_type == "common"):
        keyboard.add("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    keyboard.add("üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å", "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å", "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
    if dict_type == "shared" and shared_dict_id:
        # –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, –≤–∏–≤–æ–¥–∏–º–æ –π–æ–≥–æ –Ω–∞–∑–≤—É
        import db_manager
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM shared_dictionaries WHERE id = ?', (shared_dict_id,))
        result = cursor.fetchone()
        conn.close()
        
        dict_name = result[0] if result else "–°–ø—ñ–ª—å–Ω–∏–π"
        keyboard.add(f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", f"üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ ({dict_name})")
    else:
        # –í —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
        keyboard.add("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
    
    return keyboard

def shared_dictionary_keyboard():
    """Create keyboard for shared dictionary options"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üîë –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞")
    keyboard.add("üìã –ú–æ—ó —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏")
    keyboard.add("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def easy_level_keyboard():
    """Create keyboard for easy level"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
    keyboard.add("üè∑Ô∏è –í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ")  # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤
    keyboard.add("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def main_menu_cancel():
    """Create cancel menu keyboard"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞")  # –î–æ–¥–∞—î–º–æ —Ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    return keyboard

def language_selection_keyboard():
    """Create language selection keyboard"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞")
    return keyboard

# -*- coding: utf-8 -*-
import os
import json
import telebot
import pandas as pd
from datetime import datetime
from config import bot, user_state, ADMIN_ID

def clear_state(chat_id, preserve_dict_type=False, preserve_messages=False, preserve_level=False):
    """Clear user state and delete message if exists
    
    Args:
        chat_id: User's chat ID
        preserve_dict_type: If True, preserve the dict_type setting for this user
        preserve_messages: If True, don't delete associated messages
        preserve_level: If True, preserve the level setting for this user
    """
    if chat_id in user_state:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∞–∂–ª–∏–≤—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –æ—á–∏—â–µ–Ω–Ω—è–º
        preserved_data = {}
        
        # –¢–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
        if preserve_dict_type and "dict_type" in user_state[chat_id]:
            preserved_data["dict_type"] = user_state[chat_id]["dict_type"]
        
        # –†—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        if preserve_level and "level" in user_state[chat_id]:
            preserved_data["level"] = user_state[chat_id]["level"]
        
        # Shared dict ID, —è–∫—â–æ —î
        if preserve_dict_type and "shared_dict_id" in user_state[chat_id]:
            preserved_data["shared_dict_id"] = user_state[chat_id]["shared_dict_id"]
            
        # ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏
        message_id = None
        if preserve_messages and "message_id" in user_state[chat_id]:
            message_id = user_state[chat_id]["message_id"]
            preserved_data["message_id"] = message_id
            
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —î —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
        if not preserve_messages and "message_id" in user_state[chat_id]:
            try:
                bot.delete_message(chat_id, user_state[chat_id]["message_id"])
            except Exception as e:
                print(f"Error deleting message: {e}")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ user_state
        del user_state[chat_id]
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
        if preserved_data:
            user_state[chat_id] = preserved_data
            debug_info = ", ".join([f"{k}={v}" for k, v in preserved_data.items()])
            print(f"Debug: Preserved data for user {chat_id}: {debug_info}")

def get_user_params_path(chat_id):
    """Get path to user parameters file"""
    return f"params_{chat_id}.json"

def update_streak(chat_id):
    """Update user streak and return current streak count"""
    params_path = get_user_params_path(chat_id)
    
    try:
        with open(params_path, 'r') as f:
            params = json.load(f)
    except FileNotFoundError:
        params = {'streak': 0, 'last_active': None}
        
    today = datetime.now().date().isoformat()
    last_active = datetime.fromisoformat(params['last_active']).date() if params['last_active'] else None
    
    if last_active:
        delta = (datetime.now().date() - last_active).days
        if delta == 1:
            params['streak'] += 1
        elif delta > 1:
            params['streak'] = 1
    else:
        params['streak'] = 1
        
    params['last_active'] = today
    with open(params_path, 'w') as f:
        json.dump(params, f)
    return params['streak']

def track_activity(chat_id):
    """Track user activity and update streak"""
    params_path = get_user_params_path(chat_id)
    
    # Create file if not exists
    if not os.path.exists(params_path):
        update_streak(chat_id)
        
    return update_streak(chat_id)

def main_menu_keyboard(chat_id=None):
    """Create main menu keyboard with dictionary selection"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # Add dictionary selector button
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug main_menu_keyboard: chat_id={chat_id}, dict_type={dict_type}, shared_dict_id={shared_dict_id}")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ" –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞ —ñ –ø—Ä–∞–≤
    add_word_button = False
    
    if dict_type == "personal":
        # –£ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –≤—Å—ñ –º–æ–∂—É—Ç—å –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞
        add_word_button = True
    elif dict_type == "common" and chat_id == ADMIN_ID:
        # –£ –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞
        add_word_button = True
    elif dict_type == "shared":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
        try:
            import db_manager
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ ID —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î —É —Å—Ç–∞–Ω—ñ
            if not shared_dict_id:
                cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
                result = cursor.fetchone()
                if result and result[0]:
                    shared_dict_id = result[0]
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ ID
                    if chat_id in user_state:
                        user_state[chat_id]["shared_dict_id"] = shared_dict_id
            
            # –Ø–∫—â–æ —î shared_dict_id, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º
            if shared_dict_id:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î —Ç–≤–æ—Ä—Ü–µ–º —Å–ª–æ–≤–Ω–∏–∫–∞
                cursor.execute("""
                    SELECT 1 FROM shared_dictionaries 
                    WHERE id = ? AND created_by = ?
                """, (shared_dict_id, chat_id))
                is_creator = cursor.fetchone() is not None
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º —Å–ª–æ–≤–Ω–∏–∫–∞
                cursor.execute("""
                    SELECT shared_dict_admin FROM users
                    WHERE chat_id = ? AND shared_dict_id = ?
                """, (chat_id, shared_dict_id))
                admin_result = cursor.fetchone()
                is_admin = admin_result and admin_result[0]
                
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω –∞–±–æ —Ç–≤–æ—Ä–µ—Ü—å, –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É
                add_word_button = is_creator or is_admin or chat_id == ADMIN_ID
                
            conn.close()
        except Exception as e:
            print(f"Error checking shared dictionary admin status: {e}")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if add_word_button:
        keyboard.add("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ä—ñ–≤–Ω—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    keyboard.add("üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å", "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å", "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å")
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
    if dict_type == "shared":
        # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–∑–≤—É
        try:
            import db_manager
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ ID —Å–ª–æ–≤–Ω–∏–∫–∞, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î –≤ —Å—Ç–∞–Ω—ñ
            if not shared_dict_id:
                cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
                result = cursor.fetchone()
                if result and result[0]:
                    shared_dict_id = result[0]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —Å–ª–æ–≤–Ω–∏–∫–∞
            if shared_dict_id:
                cursor.execute('SELECT name FROM shared_dictionaries WHERE id = ?', (shared_dict_id,))
                result = cursor.fetchone()
                dict_name = result[0] if result else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                
                keyboard.add(
                    f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", 
                    f"üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ ({dict_name})"
                )
            else:
                keyboard.add("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
            
            conn.close()
        except Exception as e:
            print(f"Error getting shared dictionary name: {e}")
            keyboard.add("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
    else:
        # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
        keyboard.add("üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫")
    
    return keyboard

def shared_dictionary_keyboard():
    """Create keyboard for shared dictionary options"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üÜï –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üîë –í—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞")
    keyboard.add("üìã –ú–æ—ó —Å–ø—ñ–ª—å–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏")
    keyboard.add("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def easy_level_keyboard():
    """Create keyboard for easy level"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
    keyboard.add("üè∑Ô∏è –í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ", "üß© –í–∏–≤—á–∞—Ç–∏ –ø—Ä–∏—Å–≤—ñ–π–Ω—ñ –∑–∞–π–º–µ–Ω–Ω–∏–∫–∏")  # Added possessive articles
    keyboard.add("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def hard_level_keyboard():
    """Create keyboard for hard level"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üß© –°–∫–ª–∞–¥–Ω–∞ –≥—Ä–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤")
    keyboard.add("üè∑Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤")
    keyboard.add("‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    return keyboard

def main_menu_cancel():
    """Create cancel menu keyboard"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞")  # –î–æ–¥–∞—î–º–æ —Ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
    return keyboard

def language_selection_keyboard():
    """Create language selection keyboard"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞")
    return keyboard

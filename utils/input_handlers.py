# -*- coding: utf-8 -*-

"""
–£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
"""

import telebot
from config import bot, user_state
from utils.language_utils import get_text

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
EXIT_COMMANDS = [
    "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", 
    "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å", 
    "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å", 
    "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å",
    "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞",
    "–í—ñ–¥–º—ñ–Ω–∞"
]

def is_system_command(message):
    """Check if message text is a system command or menu button
    
    Args:
        message: Telegram message
        
    Returns:
        bool: True if message is a system command
    """
    if not hasattr(message, 'text') or not message.text:
        return False
        
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ / –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    if message.text.startswith('/'):
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if message.text in [
        "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏",
        "üß© –°–∫–ª–∞–¥–Ω–∞ –≥—Ä–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤", "üè∑Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤",
        "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫",
        "üî§ –í–∏–±—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è", "üìù –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏"
    ] + EXIT_COMMANDS:
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
    if message.text.startswith(('üá¨üáß', 'üá∫üá¶', 'üá∑üá∫', 'üáπüá∑', 'üá∏üáæ')):
        return True
        
    return False

def sanitize_user_input(text, max_length=100):
    """Sanitize user input to prevent SQL injection and limit input length
    
    Args:
        text (str): Input text to sanitize
        max_length (int): Maximum allowed length
        
    Returns:
        str: Sanitized text
    """
    if not text:
        return ""
        
    # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    sanitized = text[:max_length]
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ SQL
    sanitized = sanitized.replace("'", "''")
    sanitized = sanitized.replace(";", "")
    
    return sanitized

def handle_exit_from_activity(message):
    """Handle exit from activity using menu buttons
    
    Args:
        message: Telegram message with exit command
    """
    from utils import clear_state, main_menu_keyboard
    from utils import easy_level_keyboard, medium_level_keyboard, hard_level_keyboard
    
    chat_id = message.chat.id
    preserve_dict_type = True
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –º–µ–Ω—é –ø–æ–∫–∞–∑–∞—Ç–∏ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫–æ–º–∞–Ω–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
    if message.text in ["‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", get_text("back_to_main_menu", chat_id)]:
        keyboard = main_menu_keyboard(chat_id)  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫
        message_text = get_text("main_menu", chat_id)
        preserve_level = False
    elif message.text in ["üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å", get_text("easy_level", chat_id)]:
        keyboard = easy_level_keyboard(chat_id)  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        message_text = get_text("easy_level_select_activity", chat_id)
        preserve_level = True
        if chat_id in user_state:
            user_state[chat_id]["level"] = "easy"
    elif message.text in ["üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å", get_text("medium_level", chat_id)]:
        keyboard = medium_level_keyboard(chat_id)  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        message_text = get_text("medium_level_select_activity", chat_id)
        preserve_level = True
        if chat_id in user_state:
            user_state[chat_id]["level"] = "medium"
    elif message.text in ["üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å", get_text("hard_level", chat_id)]:
        keyboard = hard_level_keyboard(chat_id)  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        message_text = get_text("hard_level_select_activity", chat_id)
        preserve_level = True
        if chat_id in user_state:
            user_state[chat_id]["level"] = "hard"
    else:  # "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞" –∞–±–æ "–í—ñ–¥–º—ñ–Ω–∞" –∞–±–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤–µ—Ä—Å—ñ—ó
        keyboard = main_menu_keyboard(chat_id)  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        message_text = get_text("cancelled", chat_id)
        preserve_level = False
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ
    clear_state(chat_id, preserve_dict_type=preserve_dict_type, preserve_level=preserve_level)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    bot.send_message(chat_id, message_text, reply_markup=keyboard)

def safe_next_step_handler(message, callback, *args, **kwargs):
    """Safe version of register_next_step_handler that handles exit commands
    
    Args:
        message: Message to register handler for
        callback: Callback function
        *args, **kwargs: Arguments to pass to the callback
    """
    def wrapper(message):
        chat_id = message.chat.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
        localized_back_to_main = get_text("back_to_main_menu", chat_id)
        localized_cancel = get_text("cancel", chat_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
        if message.text in EXIT_COMMANDS or message.text == localized_back_to_main or message.text == localized_cancel:
            # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É
            handle_exit_from_activity(message)
            return
            
        # –Ø–∫—â–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –≤–∏—Ö–æ–¥—É, –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–ª–±–µ–∫
        try:
            callback(message, *args, **kwargs)
        except Exception as e:
            print(f"Error in safe_next_step_handler callback: {e}")
            import traceback
            traceback.print_exc()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            chat_id = message.chat.id
            bot.send_message(chat_id, get_text("error_occurred", chat_id))
    
    # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –Ω–∞—à–∏–º wrapper
    bot.register_next_step_handler(message, wrapper)

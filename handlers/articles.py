# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤.
"""

import threading
from config import bot, user_state
import db_manager
from .core import start_article_activity

@bot.message_handler(func=lambda message: message.text == "üè∑Ô∏è –í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ")
def learn_articles(message):
    """Start learning articles activity"""
    chat_id = message.chat.id
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ - –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ó–ê–í–ñ–î–ò –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug: Initial state in learn_articles: dict_type={dict_type}, shared_dict_id={shared_dict_id}")
    
    # –Ø–∫—â–æ –≤–∏–±—Ä–∞–Ω–∏–π —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∞–ª–µ –Ω–µ–º–∞—î ID, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if dict_type == "shared" and not shared_dict_id:
        try:
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result and result[0]:
                shared_dict_id = result[0]
                print(f"Retrieved shared_dict_id={shared_dict_id} from database")
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π
                dict_type = "personal"
                print(f"No shared_dict_id found, switching to personal dictionary")
                bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è –ù–µ–º–∞—î –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫."
                )
        except Exception as e:
            print(f"Error retrieving shared_dict_id: {e}")
            dict_type = "personal"  # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    state_data = {"dict_type": dict_type, "level": "easy"}
    if shared_dict_id and dict_type == "shared":
        state_data["shared_dict_id"] = shared_dict_id
    
    print(f"Debug: Setting user state to {state_data}")
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id in user_state:
        user_state[chat_id].update(state_data)
    else:
        user_state[chat_id] = state_data
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤
    start_article_activity(chat_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('art_der_', 'art_die_', 'art_das_')))
def handle_article_selection(call):
    """Handle article selection"""
    chat_id = call.message.chat.id
    
    if chat_id not in user_state or "correct_article" not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–í–∏–≤—á–∞—Ç–∏ –∞—Ä—Ç–∏–∫–ª—ñ'")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–±—Ä–∞–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å —Ç–∞ ID —Å–ª–æ–≤–∞
    selected_article = None
    if call.data.startswith('art_der_'):
        selected_article = 'der'
    elif call.data.startswith('art_die_'):
        selected_article = 'die'
    elif call.data.startswith('art_das_'):
        selected_article = 'das'
    
    correct_article = user_state[chat_id]["correct_article"]
    word = user_state[chat_id]["word"]
    word_id = user_state[chat_id]["word_id"]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∏–±–æ—Ä—É
    is_correct = selected_article == correct_article
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state[chat_id].get("dict_type", "personal")
    if dict_type == "shared":
        shared_dict_id = user_state[chat_id].get("shared_dict_id")
        db_manager.update_word_rating_shared_dict(chat_id, word_id, -0.1 if is_correct else 0.1, shared_dict_id)
    elif dict_type == "personal":
        db_manager.update_word_rating(chat_id, word_id, -0.1 if is_correct else 0.1)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if is_correct:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        bot.edit_message_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ <b>{word}</b> –º–∞—î –∞—Ä—Ç–∏–∫–ª—å <b>{correct_article}</b>.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å: {correct_article}")
        bot.edit_message_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ <b>{word}</b> –º–∞—î –∞—Ä—Ç–∏–∫–ª—å <b>{correct_article}</b>, –∞ –Ω–µ {selected_article}.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="HTML"
        )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
    threading.Timer(2, lambda: start_article_activity(chat_id)).start()

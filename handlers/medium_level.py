# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ.
"""

import random
import string
import telebot
import pandas as pd
from config import bot, user_state
from utils import clear_state, medium_level_keyboard, main_menu_keyboard
import db_manager
from utils.input_handlers import safe_next_step_handler, sanitize_user_input, is_menu_navigation_command, handle_exit_from_activity
from utils.language_utils import get_text
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–π—Ç–∏–Ω–≥—É
MEDIUM_RATING_DECREASE = -0.1  # –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
MEDIUM_RATING_INCREASE = 0.1   # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π —Å–ª–æ–≤–∞
def create_misspelled_versions(word, num_versions=3):
    """Create believable misspelled versions of a German word"""
    misspelled = []
    original = word
    word = word.lower()
    
    # –°–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è
    transforms = [
        # –ü–æ–¥–≤—ñ–π–Ω—ñ/–æ–¥–∏–Ω–∞—Ä–Ω—ñ –ø—Ä–∏–≥–æ–ª–æ—Å–Ω—ñ
        lambda w: w.replace('mm', 'm') if 'mm' in w else w.replace('m', 'mm', 1),
        lambda w: w.replace('nn', 'n') if 'nn' in w else w.replace('n', 'nn', 1),
        lambda w: w.replace('ss', 's') if 'ss' in w else w.replace('s', 'ss', 1),
        lambda w: w.replace('ll', 'l') if 'll' in w else w.replace('l', 'll', 1),
        lambda w: w.replace('tt', 't') if 'tt' in w else w.replace('t', 'tt', 1),
        
        # –ó–∞–º—ñ–Ω–∞ —É–º–ª–∞—É—Ç—ñ–≤ –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è e –ø—ñ—Å–ª—è –≥–æ–ª–æ—Å–Ω–æ—ó
        lambda w: w.replace('√§', 'a') if '√§' in w else w.replace('a', '√§', 1),
        lambda w: w.replace('√∂', 'o') if '√∂' in w else w.replace('o', '√∂', 1),
        lambda w: w.replace('√º', 'u') if '√º' in w else w.replace('u', '√º', 1),
        lambda w: w.replace('√§', 'ae') if '√§' in w else w.replace('ae', '√§'),
        lambda w: w.replace('√∂', 'oe') if '√∂' in w else w.replace('oe', '√∂'),
        lambda w: w.replace('√º', 'ue') if '√º' in w else w.replace('ue', '√º'),
        
        # –ü–æ–º–∏–ª–∫–∏ –∑ –≤–µ–ª–∏–∫–æ—é –±—É–∫–≤–æ—é
        lambda w: w.capitalize() if not w[0].isupper() else w[0].lower() + w[1:],
        
        # –ó–∞–º—ñ–Ω–∞ v/f, z/tz, s/ss
        lambda w: w.replace('v', 'f') if 'v' in w else w.replace('f', 'v', 1),
        lambda w: w.replace('tz', 'z') if 'tz' in w else w.replace('z', 'tz', 1),
        lambda w: w.replace('ss', '√ü') if 'ss' in w else w.replace('√ü', 'ss'),
        
        # –í–∏–ª—É—á–µ–Ω–Ω—è —á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±—É–∫–≤
        lambda w: w[:-1] if len(w) > 3 else w,
        lambda w: w[1:] if len(w) > 3 else w,
        lambda w: w + random.choice('aeiou') if len(w) > 2 else w,
        lambda w: w[:int(len(w)/2)] + random.choice('aeiou') + w[int(len(w)/2):] if len(w) > 2 else w
    ]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–≥—ñ—Å—Ç—Ä
    is_capitalized = original[0].isupper() if len(original) > 0 else False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    attempts = 0
    while len(misspelled) < num_versions and attempts < 20:
        attempts += 1
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—é
        transform = random.choice(transforms)
        misspelled_word = transform(word)
        
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—é
        if is_capitalized and not misspelled_word[0].isupper():
            misspelled_word = misspelled_word.capitalize()
        
        # –Ø–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
        if misspelled_word != original and misspelled_word not in misspelled:
            misspelled.append(misspelled_word)
    
    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤, –¥–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ –∑–∞–º—ñ–Ω–∏
    while len(misspelled) < num_versions:
        # –ó–∞–º—ñ–Ω–∞ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –ª—ñ—Ç–µ—Ä–∏
        if len(original) > 2:
            pos = random.randint(1, len(original)-1)
            new_char = random.choice(string.ascii_lowercase)
            misspelled_word = original[:pos] + new_char + original[pos+1:]
            if misspelled_word != original and misspelled_word not in misspelled:
                misspelled.append(misspelled_word)
    
    return misspelled[:num_versions]

@bot.message_handler(func=lambda message: message.text == "üî§ –í–∏–±—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è" or message.text == get_text("choose_correct_spelling", message.chat.id))
def spelling_choice_game(message):
    """Game where user selects the correct spelling from 4 options"""
    chat_id = message.chat.id
    
    # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å —è–∫ "medium"
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    user_state[chat_id] = {
        "dict_type": dict_type,
        "level": "medium",
        "game": "spelling_choice",
        "attempts": 0
    }
    
    if shared_dict_id:
        user_state[chat_id]["shared_dict_id"] = shared_dict_id
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –≥—Ä–∏
        df = None
        if dict_type == "shared":
            if shared_dict_id:
                df = db_manager.get_shared_dictionary_words(chat_id, shared_dict_id)
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", reply_markup=medium_level_keyboard())
                return
        else:
            df = db_manager.get_user_words(chat_id, dict_type)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ª—ñ–≤
        if df is None or df.empty:
            dict_name = get_text("shared_dictionary", chat_id) if dict_type == "shared" else get_text("common_dictionary", chat_id, "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É") if dict_type == "common" else get_text("personal_dictionary", chat_id)
            bot.send_message(chat_id, f"{get_text('in', chat_id)} {dict_name} {get_text('no_words', chat_id)}", reply_markup=medium_level_keyboard(chat_id))
            return
            
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ
        word_row = df.sample(1).iloc[0]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è
        misspelled_versions = create_misspelled_versions(word_row['word'])
        
        # –í—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–ª—è –≤–∏–±–æ—Ä—É
        all_options = [word_row['word']] + misspelled_versions
        random.shuffle(all_options)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        user_state[chat_id].update({
            "word_id": word_row['id'],
            "word": word_row['word'],
            "translation": word_row['translation'],
            "options": all_options
        })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            telebot.types.InlineKeyboardButton(option, callback_data=f"spell_{i}")
            for i, option in enumerate(all_options)
        ]
        markup.add(*buttons)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        bot.send_message(
            chat_id,
            f"üî§ –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Å–ª–æ–≤–∞:\n\n"
            f"<b>–ü–µ—Ä–µ–∫–ª–∞–¥: {word_row['translation']}</b>",
            parse_mode="HTML",
            reply_markup=markup
        )
    except Exception as e:
        print(f"Error in spelling_choice_game: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≥—Ä–∏.", reply_markup=medium_level_keyboard())

@bot.callback_query_handler(func=lambda call: call.data.startswith("spell_"))
def handle_spelling_choice(call):
    """Handle user's selection in the spelling choice game"""
    chat_id = call.message.chat.id
    
    if chat_id not in user_state or user_state[chat_id].get("game") != "spelling_choice":
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –æ–±—Ä–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞
    selected_index = int(call.data.split("_")[1])
    selected_option = user_state[chat_id]["options"][selected_index]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    correct_option = user_state[chat_id]["word"]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    is_correct = selected_option == correct_option
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞
    word_id = user_state[chat_id]["word_id"]
    dict_type = user_state[chat_id].get("dict_type", "personal")
    shared_dict_id = user_state[chat_id].get("shared_dict_id")
    
    try:
        # –ó–º—ñ–Ω—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        rating_change = MEDIUM_RATING_DECREASE if is_correct else MEDIUM_RATING_INCREASE
        
        if dict_type == "shared" and shared_dict_id:
            db_manager.update_word_rating_shared_dict(chat_id, word_id, rating_change, shared_dict_id)
            print(f"Updated shared dict rating for word {word_id}: {rating_change}")
        else:
            db_manager.update_word_rating(chat_id, word_id, rating_change)
            print(f"Updated personal dict rating for word {word_id}: {rating_change}")
                
        if is_correct:
            bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            bot.edit_message_text(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"<b>{correct_option}</b> = <b>{user_state[chat_id]['translation']}</b>",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="HTML"
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            bot.edit_message_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"–í–∏ –æ–±—Ä–∞–ª–∏: <b>{selected_option}</b>\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{correct_option}</b> = <b>{user_state[chat_id]['translation']}</b>",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"Error updating rating: {e}")
        import traceback
        traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
    import threading
    threading.Timer(2.0, lambda: spelling_choice_game_new_word(chat_id)).start()

def spelling_choice_game_new_word(chat_id):
    """Start a new round of the spelling choice game"""
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É –∑ —Ç–∏–º–∏ —Å–∞–º–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        if chat_id in user_state and user_state[chat_id].get("game") == "spelling_choice":
            bot.send_message(chat_id, "–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ —Ñ—É–Ω–∫—Ü—ñ—é
            class FakeMessage:
                def __init__(self, chat_id):
                    self.chat = telebot.types.Chat(chat_id, "private")
                    self.from_user = telebot.types.User(chat_id, False, "user")
                    self.text = "üî§ –í–∏–±—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è"
            
            spelling_choice_game(FakeMessage(chat_id))
    except Exception as e:
        print(f"Error starting new spelling game: {e}")

@bot.message_handler(func=lambda message: message.text == "üìù –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏" or message.text == get_text("fill_in_gaps", message.chat.id))
def missing_letters_game(message):
    """Game where user needs to fill in missing letters"""
    chat_id = message.chat.id
    
    # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å —è–∫ "medium"
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    user_state[chat_id] = {
        "dict_type": dict_type,
        "level": "medium",
        "game": "missing_letters",
        "attempts": 0
    }
    
    if shared_dict_id:
        user_state[chat_id]["shared_dict_id"] = shared_dict_id
    
    generate_missing_letters_exercise(chat_id)

def generate_missing_letters_exercise(chat_id):
    """Generate a new exercise with missing letters"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –≥—Ä–∏
        dict_type = user_state[chat_id].get("dict_type", "personal")
        shared_dict_id = user_state[chat_id].get("shared_dict_id")
        
        df = None
        if dict_type == "shared":
            if shared_dict_id:
                df = db_manager.get_shared_dictionary_words(chat_id, shared_dict_id)
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Å–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", reply_markup=medium_level_keyboard())
                return
        else:
            df = db_manager.get_user_words(chat_id, dict_type)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ª—ñ–≤
        if df is None or df.empty:
            # Use localization instead of hard-coded Ukrainian
            # get_text('in') = "üì≠ –í " or localized prefix
            # get_text('no_words') = " —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤." or localized suffix
            # get_text('{dict_type}_dictionary') gives the dictionary name
            dict_name = get_text(f"{dict_type}_dictionary", chat_id)
            message = f"{get_text('in', chat_id)} {dict_name} {get_text('no_words', chat_id)}"
            bot.send_message(chat_id, message, reply_markup=medium_level_keyboard(chat_id))
            return
        
        # –í–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–æ, —è–∫–µ –º–∞—î –±—ñ–ª—å—à–µ 3 –±—É–∫–≤
        filtered_df = df[df['word'].str.len() > 3]
        if filtered_df.empty:
            filtered_df = df  # –Ø–∫—â–æ –Ω–µ–º–∞ –¥–æ–≤–≥–∏—Ö —Å–ª—ñ–≤, –±–µ—Ä–µ–º–æ –±—É–¥—å-—è–∫—ñ
            
        word_row = filtered_df.sample(1).iloc[0]
        word = word_row['word']
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—É–∫–≤, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ (25-35% –¥–æ–≤–∂–∏–Ω–∏ —Å–ª–æ–≤–∞)
        num_missing = max(1, min(3, int(len(word) * random.uniform(0.25, 0.35))))
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –±—É–∫–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É (–Ω–µ –ø–µ—Ä—à—É —ñ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—é)
        valid_positions = list(range(1, len(word) - 1))
        if len(valid_positions) < num_missing:
            valid_positions = list(range(len(word)))  # –î–ª—è –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª—ñ–≤
            
        missing_positions = sorted(random.sample(valid_positions, num_missing))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–æ –∑ –ø—Ä–æ–ø—É—â–µ–Ω–∏–º–∏ –±—É–∫–≤–∞–º–∏
        word_with_blanks = list(word)
        missing_letters = ""
        for pos in missing_positions:
            missing_letters += word[pos]
            word_with_blanks[pos] = '_'
        
        word_with_blanks = ''.join(word_with_blanks)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        user_state[chat_id].update({
            "word_id": word_row['id'],
            "word": word,
            "translation": word_row['translation'],
            "word_with_blanks": word_with_blanks,
            "missing_letters": missing_letters,
            "missing_positions": missing_positions
        })
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        bot.send_message(
            chat_id,
            f"üìù –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ñ –ª—ñ—Ç–µ—Ä–∏ —É —Å–ª–æ–≤—ñ:\n\n"
            f"<b>{word_with_blanks}</b>\n\n"
            f"–ü–µ—Ä–µ–∫–ª–∞–¥: <b>{word_row['translation']}</b>\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å <b>{num_missing}</b> –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –ª—ñ—Ç–µ—Ä –ø—ñ–¥—Ä—è–¥, –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤:",
            parse_mode="HTML"
        )
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.register_next_step_handler_by_chat_id(chat_id, handle_missing_letters_answer)
        
    except Exception as e:
        print(f"Error in missing_letters_game: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.", reply_markup=medium_level_keyboard())

def handle_missing_letters_answer(message):
    """Handle user's answer in the missing letters game"""
    chat_id = message.chat.id
    
    # Check for menu navigation commands first
    if is_menu_navigation_command(message):
        handle_exit_from_activity(message)
        return
    
    # Check if the game is still active
    if chat_id not in user_state or user_state[chat_id].get("game") != "missing_letters":
        bot.send_message(chat_id, get_text("game_not_active", chat_id), reply_markup=medium_level_keyboard(chat_id))
        return
    
    # Get user's answer - sanitize it first
    user_answer = sanitize_user_input(message.text.strip())
    correct_letters = user_state[chat_id]["missing_letters"]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    is_correct = user_answer.lower() == correct_letters.lower()
    
    word = user_state[chat_id]["word"]
    translation = user_state[chat_id]["translation"]
    word_with_blanks = user_state[chat_id]["word_with_blanks"]
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞
    word_id = user_state[chat_id]["word_id"]
    dict_type = user_state[chat_id].get("dict_type", "personal")
    shared_dict_id = user_state[chat_id].get("shared_dict_id")
    
    try:
        if is_correct:
            # –ó–º–µ–Ω—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ (–≤–æ–Ω–æ —Å—Ç–∞—î –ª–µ–≥—à–∏–º)
            rating_change = MEDIUM_RATING_DECREASE
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            bot.send_message(
                chat_id,
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                f"<b>{word}</b> = <b>{translation}</b>",
                parse_mode="HTML"
            )
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
            bot.send_message(chat_id, "–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ...")
            generate_missing_letters_exercise(chat_id)
        else:
            # –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ (–≤–æ–Ω–æ —Å—Ç–∞—î –≤–∞–∂—á–∏–º)
            rating_change = MEDIUM_RATING_INCREASE
            
            # –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
            user_state[chat_id]["attempts"] = user_state[chat_id].get("attempts", 0) + 1
            attempts = user_state[chat_id]["attempts"]
            
            if attempts >= 2:
                # –ü—ñ—Å–ª—è –¥–≤–æ—Ö —Å–ø—Ä–æ–± –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: <b>{correct_letters}</b>\n"
                    f"–ü–æ–≤–Ω–µ —Å–ª–æ–≤–æ: <b>{word}</b> = <b>{translation}</b>",
                    parse_mode="HTML"
                )
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤—É –≥—Ä—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏
                bot.send_message(chat_id, "–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ...")
                generate_missing_letters_exercise(chat_id)
            else:
                # –î–∞—î–º–æ —â–µ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É
                bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n\n"
                    f"<b>{word_with_blanks}</b>\n\n"
                    f"–ü–µ—Ä–µ–∫–ª–∞–¥: <b>{translation}</b>",
                    parse_mode="HTML"
                )
                
                # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏
                bot.register_next_step_handler_by_chat_id(chat_id, handle_missing_letters_answer)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞
        if dict_type == "shared" and shared_dict_id:
            db_manager.update_word_rating_shared_dict(chat_id, word_id, rating_change, shared_dict_id)
            print(f"Updated shared dict rating for word {word_id}: {rating_change}")
        else:
            db_manager.update_word_rating(chat_id, word_id, rating_change)
            print(f"Updated personal dict rating for word {word_id}: {rating_change}")
            
    except Exception as e:
        print(f"Error in handle_missing_letters_answer: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.", reply_markup=medium_level_keyboard())

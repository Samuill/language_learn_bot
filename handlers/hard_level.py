# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è.
"""

import random
import telebot
import pandas as pd
from config import bot, user_state
from utils import clear_state, main_menu_keyboard, hard_level_keyboard
from utils.input_handlers import safe_next_step_handler, sanitize_user_input  # –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
import db_manager
from dictionary import return_to_appropriate_menu
from utils.language_utils import get_text, is_command 

# –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ –≤–∏—Å–æ–∫–æ–º—É —Ä—ñ–≤–Ω—ñ
HARD_RATING_DECREASE = -0.1    # –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
HARD_RATING_INCREASE = 0.2     # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

@bot.message_handler(func=lambda message: message.text == "üß© –°–∫–ª–∞–¥–Ω–∞ –≥—Ä–∞")
def hard_game(message):
    """Placeholder for a complex game (to be developed)"""
    chat_id = message.chat.id
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ —Ä—ñ–≤–µ–Ω—å
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False, preserve_level=True)
    
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —É —Ä–æ–∑—Ä–æ–±—Ü—ñ
    bot.send_message(
        chat_id, 
        get_text("hard_game_developing", chat_id),
        reply_markup=hard_level_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìù –í–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤")
def word_typing_game(message):
    """Game where user needs to type German translation of a Ukrainian word"""
    chat_id = message.chat.id
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ —Ä—ñ–≤–µ–Ω—å
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False, preserve_level=True)
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ä—ñ–≤–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ "hard"
    if chat_id in user_state:
        user_state[chat_id]["level"] = "hard"
    else:
        dict_type = "personal"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        user_state[chat_id] = {"dict_type": dict_type, "level": "hard"}
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ª–æ–≤–∞ –∑ —Å–ª–æ–≤–Ω–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        df = None
        if dict_type == "shared":
            if shared_dict_id:
                df = db_manager.get_shared_dictionary_words(chat_id, shared_dict_id)
            else:
                bot.send_message(chat_id, get_text("no_dictionary",chat_id), reply_markup=hard_level_keyboard())
                return
        else:
            df = db_manager.get_user_words(chat_id, dict_type)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–ª—ñ–≤
        if df is None or df.empty:
            dict_name = "—Å–ø—ñ–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "shared" else "–∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É" if dict_type == "common" else "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É"
            bot.send_message(chat_id,get_text("in",chat_id) + f"{dict_name}"+ get_text("no_words",chat_id), reply_markup=hard_level_keyboard())
            return
            
        # –î–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –≤–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–∞ –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º —É —Å–ø–∞–¥–∞—é—á–æ–º—É –ø–æ—Ä—è–¥–∫—É (—Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–π–≤–∞–∂—á—ñ —Å–ª–æ–≤–∞)
        df = df.sort_values(by="priority", ascending=False)
        
        # –ë–µ—Ä–µ–º–æ –≤–µ—Ä—Ö–Ω—ñ 30% —Å–ª—ñ–≤ –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
        top_word_count = max(1, int(len(df) * 0.3))
        top_words_df = df.head(top_word_count)
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –Ω–∞–π—Ç—è–∂—á–∏—Ö —Å–ª—ñ–≤
        word_row = top_words_df.sample(1).iloc[0]
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        user_state[chat_id] = {
            "dict_type": dict_type,
            "level": "hard",
            "game": "word_typing",
            "word_id": word_row['id'],
            "word": word_row['word'],
            "translation": word_row['translation'],
            "attempts": 0
        }
        
        if shared_dict_id:
            user_state[chat_id]["shared_dict_id"] = shared_dict_id
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        sent_message = bot.send_message(
            chat_id,
            get_text("enter_german_translation", chat_id).format(word=word_row['translation']),
            parse_mode="HTML"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ
        safe_next_step_handler(sent_message, handle_word_typing_answer)

    except Exception as e:
        print(f"Error in word_typing_game: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id,get_text("error_occurred",chat_id), reply_markup=hard_level_keyboard())

def handle_word_typing_answer(message):
    """Handle user's answer in word typing game"""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
    if chat_id not in user_state or user_state[chat_id].get("game") != "word_typing":
        bot.send_message(chat_id, get_text("game_not_stop",chat_id), reply_markup=hard_level_keyboard())
        return
    
    # –û—á–∏—â–∞–µ–º —ñ –±–µ–∑–ø–µ—á–Ωo –æ–±—Ä–æ–±–ª—è—î–º–æ –≤–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_answer = sanitize_user_input(message.text.strip().lower())
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    correct_word = user_state[chat_id]["word"]
    translation = user_state[chat_id]["translation"]
    word_id = user_state[chat_id]["word_id"]
    dict_type = user_state[chat_id]["dict_type"]
    shared_dict_id = user_state[chat_id].get("shared_dict_id")
    correct_answer = correct_word.strip().lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    is_correct = user_answer == correct_answer
    
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if is_correct:
            bot.send_message(
                chat_id,
                get_text("correct_translation", chat_id).format(translation=translation, word=correct_word),
                parse_mode="HTML"
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ - –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
            rating_change = HARD_RATING_DECREASE
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            attempts = user_state[chat_id]["attempts"] + 1
            user_state[chat_id]["attempts"] = attempts
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ - –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
            rating_change = HARD_RATING_INCREASE
            
            # –Ø–∫—â–æ —Ü–µ –≤–∂–µ —Ç—Ä–µ—Ç—è —Å–ø—Ä–æ–±–∞, –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
            if attempts >= 2:
                bot.send_message(
                    chat_id,
                    get_text("incorrect_translation_final", chat_id).format(translation=translation, word=correct_word),
                    parse_mode="HTML"
                )
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–æ–≤–∏–º —Å–ª–æ–≤–æ–º
                bot.send_message(chat_id, get_text("continue_game",chat_id))
                word_typing_game(message)
                return
            else:
                # –î–∞—î–º–æ —â–µ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É
                sent_message = bot.send_message(
                    chat_id, 
                    get_text("incorrect_try_again", chat_id).format(translation=translation),
                    parse_mode="HTML"
                )
                bot.register_next_step_handler(sent_message, handle_word_typing_answer)
                return
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω—É —Ä–µ–π—Ç–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞
        if dict_type == "shared" and shared_dict_id:
            db_manager.update_word_rating_shared_dict(chat_id, word_id, rating_change, shared_dict_id)
            print(f"Updated shared dict rating for word {word_id}: {rating_change}")
        else:
            db_manager.update_word_rating(chat_id, word_id, rating_change)
            print(f"Updated personal dict rating for word {word_id}: {rating_change}")
        
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–æ–≤–∏–º —Å–ª–æ–≤–æ–º
        bot.send_message(chat_id, get_text("continue_game",chat_id))
        word_typing_game(message)
    except Exception as e:
        print(f"Error processing answer: {e}")
        import traceback
        traceback.print_exc()

@bot.message_handler(func=lambda message: message.text == "üè∑Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤")
def article_typing_game(message):
    """Game where user needs to type correct article for a German word"""
    chat_id = message.chat.id
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ —Ä—ñ–≤–µ–Ω—å
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False, preserve_level=True)
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ä—ñ–≤–µ–Ω—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ "hard"
    if chat_id in user_state:
        user_state[chat_id]["level"] = "hard"
    else:
        dict_type = "personal"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        user_state[chat_id] = {"dict_type": dict_type, "level": "hard"}
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ –∞—Ä—Ç–∏–∫–ª–µ–º –∑ —Å–ª–æ–≤–Ω–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        import db_manager
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        language = db_manager.get_user_language(chat_id) or "uk"
        results = None
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Å–ª–æ–≤–Ω–∏–∫–∞, –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–ª–æ–≤–∞ –∑ –≤–∏—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        if dict_type == "shared" and shared_dict_id:
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, 
                   COALESCE(sd.user_{chat_id}, 0.0) as rating
            FROM shared_dict_{shared_dict_id} sd
            JOIN words w ON sd.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            ORDER BY sd.user_{chat_id} DESC
            LIMIT 30
            """
            print(f"DEBUG query for shared dictionary: {query}")
        
        elif dict_type == "common":
            # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥ —ñ–º—ñ—Ç—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, 
                   RANDOM() as rating
            FROM words w
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            ORDER BY rating DESC
            LIMIT 30
            """
        else:
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, –±–µ—Ä–µ–º–æ —Å–ª–æ–≤–∞ –∑ –Ω–∞–π–≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, 
                   u.rating
            FROM user_{chat_id} u
            JOIN words w ON u.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            ORDER BY u.rating DESC
            LIMIT 30
            """
            
        cursor.execute(query)
        results = cursor.fetchall()
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ —Ç–æ–ø-—Å–ª—ñ–≤ (–ø–µ—Ä—à—ñ 30%)
        if results:
            top_results_count = max(1, int(len(results) * 0.3))
            top_results = results[:top_results_count]
            result = random.choice(top_results)
        else:
            # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ–º–∞—î, –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ —Ü–µ
            bot.send_message(chat_id, get_text("in"+"dictionary"+"", chat_id),
                           reply_markup=hard_level_keyboard())
            conn.close()
            return
        
        # –†–æ–∑–±–∏—Ä–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        word_id, word, correct_article, article_id, translation, rating = result
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        user_state[chat_id] = {
            "word_id": word_id,
            "word": word,
            "correct_article": correct_article,
            "dict_type": dict_type,
            "level": "hard",
            "game": "article_typing",
            "translation": translation,
            "attempts": 0,
            "rating": rating  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
        }
        
        if shared_dict_id:
            user_state[chat_id]["shared_dict_id"] = shared_dict_id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø–∞–¥–µ–∂—É
        case_explanation = db_manager.get_case_explanation("Dativ" if random.random() < 0.5 else "Akkusativ", language)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—è –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º –ø–∞–¥–µ–∂—É
        message_text = get_text("enter_article", chat_id).format(
            word=word, 
            translation=translation, 
            case_explanation=case_explanation
        )
        
        sent_message = bot.send_message(
            chat_id,
            message_text,
            parse_mode="HTML"
        )
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.register_next_step_handler(sent_message, handle_article_typing_answer)
        
        conn.close()
        
    except Exception as e:
        print(f"Error in article_typing_game: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, get_text("error_occurred",chat_id), reply_markup=hard_level_keyboard())

def handle_article_typing_answer(message):
    """Handle user's answer in article typing game"""
    chat_id = message.chat.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –≥—Ä–∏ —É —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id not in user_state or user_state[chat_id].get("game") != "article_typing":
        bot.send_message(chat_id, get_text("game_not_stop",chat_id), reply_markup=hard_level_keyboard())
        return
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —è–∫ –∫–æ–º–∞–Ω–¥–∏, –∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    menu_commands = [
        "üß© –°–∫–ª–∞–¥–Ω–∞ –≥—Ä–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤", "üè∑Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤", 
        "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "üü¢ –õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å", "üü† –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å", 
        "üî¥ –°–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å", "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", "üë• –°–ø—ñ–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫", 
        "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏"
    ]
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é, –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É —ñ –æ–±—Ä–æ–±–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É
    if message.text in menu_commands:
        # –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –≤ –º–µ–∂–∞—Ö –º–µ–Ω—é —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å
        preserve_level = message.text in ["üß© –°–∫–ª–∞–¥–Ω–∞ –≥—Ä–∞", "üìù –í–≤–µ–¥–µ–Ω–Ω—è —Å–ª—ñ–≤", "üè∑Ô∏è –í–≤–µ–¥–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤"]
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑–∞—Ç–∏
        if preserve_level:
            reply_markup = hard_level_keyboard()
            msg_text = get_text("game_cancelled", chat_id) 
        else:
            reply_markup = main_menu_keyboard(chat_id)
            msg_text = get_text("game_cancelled", chat_id)
            
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
        bot.send_message(
            chat_id,
            msg_text,
            reply_markup=reply_markup
        )
        
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ —Ç–∞ –º–æ–∂–ª–∏–≤–æ —Ä—ñ–≤–µ–Ω—å
        clear_state(chat_id, preserve_dict_type=True, preserve_messages=False, preserve_level=preserve_level)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —ñ–Ω—à–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É
        from telebot.types import Message
        
        new_message = Message(
            message_id=message.message_id,
            from_user=message.from_user,
            date=message.date,
            chat=message.chat,
            content_type='text',
            options={},
            json_string=None
        )
        new_message.text = message.text
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥–∏
        bot.process_new_messages([new_message])
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∏
    correct_article = user_state[chat_id]["correct_article"]
    word = user_state[chat_id]["word"]
    word_id = user_state[chat_id]["word_id"]
    dict_type = user_state[chat_id]["dict_type"]
    shared_dict_id = user_state[chat_id].get("shared_dict_id")
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä)
    user_answer = message.text.strip().lower()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if user_answer == correct_article.lower():
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        bot.send_message(
            chat_id,
            get_text("correct_article_answer", chat_id).format(word=word, article=correct_article),
            parse_mode="HTML"
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ - –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –±—ñ–ª—å—à–µ –∑–Ω–∏–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É
        if dict_type == "shared" and shared_dict_id:
            db_manager.update_word_rating_shared_dict(chat_id, word_id, +0.2, shared_dict_id)
        else:
            db_manager.update_word_rating(chat_id, word_id, -0.1)
        
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–æ–≤–∏–º —Å–ª–æ–≤–æ–º
        bot.send_message(chat_id, get_text("continue_game",chat_id))
        article_typing_game(message)
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        attempts = user_state[chat_id]["attempts"] + 1
        user_state[chat_id]["attempts"] = attempts
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–æ–≤–∞ - –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –º–µ–Ω—à–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–º–∏–ª–∫—É
        if dict_type == "shared" and shared_dict_id:
            db_manager.update_word_rating_shared_dict(chat_id, word_id, 0.2, shared_dict_id)
        else:
            db_manager.update_word_rating(chat_id, word_id, 0.2)
        
        # –Ø–∫—â–æ —Ü–µ –≤–∂–µ –¥—Ä—É–≥–∞ —Å–ø—Ä–æ–±–∞, –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        if attempts >= 2:  # –ó–º—ñ–Ω–µ–Ω–æ –∑ 3 –Ω–∞ 2 —Å–ø—Ä–æ–±–∏
            bot.send_message(
                chat_id,
                get_text("incorrect_article_final", chat_id).format(word=word, article=correct_article),
                parse_mode="HTML"
            )
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –Ω–æ–≤–∏–º —Å–ª–æ–≤–æ–º
            bot.send_message(chat_id, get_text("continue_game",chat_id))
            article_typing_game(message)
        else:
            # –î–∞—î–º–æ —â–µ –æ–¥–Ω—É —Å–ø—Ä–æ–±—É
            sent_message = bot.send_message(
                chat_id, 
                get_text("incorrect_article_retry", chat_id).format(word=word),
                parse_mode="HTML"
            )
            bot.register_next_step_handler(sent_message, handle_article_typing_answer)

# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤.
"""

import telebot
from config import bot, user_state, translator, ADMIN_ID
from utils import clear_state, main_menu_keyboard, main_menu_cancel
from storage import get_user_file_path
from dictionary import save_word

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ")
def add_word(message):
    clear_state(message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ, —è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏:", reply_markup=main_menu_cancel())
    user_state[message.chat.id] = {
        "step": "adding_word",
        "dict_type": user_state.get(message.chat.id, {}).get("dict_type", "personal")
    }

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "adding_word")
def handle_translation(message):
    """Handle word input for translation"""
    chat_id = message.chat.id
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ "–í—ñ–¥–º—ñ–Ω–∞"
    if message.text == "–í—ñ–¥–º—ñ–Ω–∞" or message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞":
        clear_state(chat_id)
        bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                       reply_markup=main_menu_keyboard(chat_id))
        return
        
    if not message.text or message.text.startswith('/'):
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ —Ç–µ–∫—Å—Ç–æ–º!")
        return
        
    # Check if the text is a command
    if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"]:
        bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
        return
        
    word = message.text.strip()
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    
    # Check permissions for common dictionary
    if dict_type == "common" and chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞!", 
                        reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)
        return
    
    if dict_type == "personal":
        file_path, language = get_user_file_path(chat_id)
        if not file_path:
            bot.send_message(chat_id, "‚ùå –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –Ω–µ –æ–±—Ä–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /start.")
            return
    else:
        from storage import get_common_file_path
        _, language = get_common_file_path()
    
    translation = translator.translate(word, src="de", dest=language).text
    
    if translation:
        # Update user state with translation data
        user_state[chat_id].update({
            "step": "confirm_translation",
            "word": word,
            "auto_translation": translation,
            "language": language
        })
        
        # Create confirmation keyboard with emojis
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞")  # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
        bot.send_message(chat_id, f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–∫–ª–∞–¥: {translation}. –¶–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=keyboard)
    else:
        bot.send_message(chat_id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "confirm_translation")
def handle_confirmation(message):
    """Handle translation confirmation"""
    chat_id = message.chat.id
    
    try:
        if message.text == "‚úÖ –¢–∞–∫" or message.text == "–¢–∞–∫":
            save_word(chat_id)
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!", 
                            reply_markup=main_menu_keyboard(chat_id))
        elif message.text == "‚ùå –ù—ñ" or message.text == "–ù—ñ":
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥ –≤—Ä—É—á–Ω—É:", 
                           reply_markup=main_menu_cancel())
            user_state[chat_id]["step"] = "manual_translation"
        elif message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞" or message.text == "–í—ñ–¥–º—ñ–Ω–∞":
            clear_state(chat_id)
            bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                           reply_markup=main_menu_keyboard(chat_id))
        else:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '‚úÖ –¢–∞–∫', '‚ùå –ù—ñ' –∞–±–æ '‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞'.")
    except Exception as e:
        print(f"Error in handle_confirmation: {e}")
        clear_state(chat_id)
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", 
                       reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") == "manual_translation")
def handle_manual_translation(message):
    """Handle manual translation input"""
    chat_id = message.chat.id
    
    try:
        # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ "–í—ñ–¥–º—ñ–Ω–∞"
        if message.text == "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞" or message.text == "–í—ñ–¥–º—ñ–Ω–∞":
            clear_state(chat_id)
            bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", 
                           reply_markup=main_menu_keyboard(chat_id))
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é
        if message.text in ["‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ", "üìñ –í—á–∏—Ç–∏ –Ω–æ–≤—ñ —Å–ª–æ–≤–∞", "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", 
                          "‚úÖ –¢–∞–∫", "‚ùå –ù—ñ", "‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞"]:
            bot.send_message(chat_id, "‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É.")
            return
        
        save_word(chat_id, message.text.strip())
        bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑ –≤–∞—à–∏–º –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º!", 
                        reply_markup=main_menu_keyboard(chat_id))
    except Exception as e:
        print(f"Error in handle_manual_translation: {e}")
        clear_state(chat_id)
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥—É.", 
                       reply_markup=main_menu_keyboard(chat_id))

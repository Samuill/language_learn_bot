# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–¶–µ–π –º–æ–¥—É–ª—å –º—ñ—Å—Ç–∏—Ç—å —Å–ø—ñ–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö.
"""

import random
import telebot
import pandas as pd
from config import bot, user_state

def start_learning(chat_id, df):
    """Start learning new words activity"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ DataFrame
    if df.empty:
        bot.send_message(chat_id, "üì≠ –£ –≤–∞—à–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É –ø–æ–∫–∏ –Ω–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ["word", "translation", "priority"]
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        print(f"ERROR: Missing required columns: {missing_columns}")
        print(f"Available columns: {df.columns.tolist()}")
        
        # –Ø–∫—â–æ –±—Ä–∞–∫—É—î –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É, –∞–ª–µ —î uk_tran –∞–±–æ ru_tran, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
        if "translation" in missing_columns:
            if "uk_tran" in df.columns:
                df["translation"] = df["uk_tran"]
            elif "ru_tran" in df.columns:
                df["translation"] = df["ru_tran"]
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        if "priority" in missing_columns:
            df["priority"] = 0.0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å–ª–æ–≤–Ω–∏–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return False
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —Å–ª—ñ–≤
    if "priority" in df.columns:
        df = df.sort_values(by="priority", ascending=False)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è
    words = df.sample(min(10, len(df)))
    
    translations = words['translation'].tolist()
    de_words = words['word'].tolist()
    random.shuffle(translations)
    random.shuffle(de_words)
    
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for tr, de in zip(translations, de_words):
        markup.add(
            telebot.types.InlineKeyboardButton(tr, callback_data=f'tr_{tr}'),
            telebot.types.InlineKeyboardButton(de, callback_data=f'de_{de}')
        )
    
    user_state[chat_id] = {
        "pairs": list(zip(words['translation'], words['word'])),
        "selected_tr": None,
        "message_id": None,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    
    sent_message = bot.send_message(chat_id, "üîç –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É —Å–ª—ñ–≤:", reply_markup=markup)
    user_state[chat_id]["message_id"] = sent_message.message_id
    return True

def start_repetition(chat_id, df):
    """Start repetition activity"""
    word = df.sample(1).iloc[0]
    sample_size = min(3, len(df))
    translations = df['translation'].sample(sample_size).tolist()
    if word['translation'] not in translations:
        translations[0] = word['translation']
    random.shuffle(translations)
    
    markup = telebot.types.InlineKeyboardMarkup()
    for tr in translations:
        markup.add(telebot.types.InlineKeyboardButton(
            tr, 
            callback_data=f"ans_{word['word']}_{tr}"
        ))
    
    sent_message = bot.send_message(chat_id, f"üìñ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ –¥–ª—è —Å–ª–æ–≤–∞: {word['word']}", reply_markup=markup)
    user_state[chat_id] = {
        "current_word": word,
        "message_id": sent_message.message_id,
        "dict_type": user_state.get(chat_id, {}).get("dict_type", "personal")
    }
    return True

def start_article_activity(chat_id):
    """Start learning articles activity"""
    # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞ –≤ —Å—Ç–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    dict_type = user_state.get(chat_id, {}).get("dict_type", "personal")
    shared_dict_id = user_state.get(chat_id, {}).get("shared_dict_id", None)
    
    print(f"Debug: Starting article activity for user {chat_id} with dict_type={dict_type}, shared_dict_id={shared_dict_id}")
    
    # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î ID —Å–ª–æ–≤–Ω–∏–∫–∞ –≤ –ë–î, —è–∫—â–æ –Ω–µ–º–∞—î –≤ —Å—Ç–∞–Ω—ñ
    if dict_type == "shared" and not shared_dict_id:
        try:
            import db_manager
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT shared_dict_id FROM users WHERE chat_id = ?", (chat_id,))
            result = cursor.fetchone()
            conn.close()
            
            if result and result[0]:
                shared_dict_id = result[0]
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if chat_id in user_state:
                    user_state[chat_id]["shared_dict_id"] = shared_dict_id
                print(f"Retrieved shared_dict_id={shared_dict_id} from database for user {chat_id}")
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞, –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π
                dict_type = "personal"
                if chat_id in user_state:
                    user_state[chat_id]["dict_type"] = "personal"
                print(f"No active shared dictionary found, switching to personal dictionary")
        except Exception as e:
            print(f"Error retrieving shared_dict_id: {e}")
            dict_type = "personal"  # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
            if chat_id in user_state:
                user_state[chat_id]["dict_type"] = "personal"
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ, —è–∫–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ
        last_word_id = user_state.get(chat_id, {}).get("last_article_word_id", None)
        
        import db_manager
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        language = db_manager.get_user_language(chat_id) or "uk"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏, –≤–∏–∫–ª—é—á–∞—é—á–∏ –∞—Ä—Ç–∏–∫–ª—å –∑ ID=4 (–ø–æ—Ä–æ–∂–Ω—ñ–π) 
        # —ñ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–∫–∞–∑–∞–Ω–µ —Å–ª–æ–≤–æ
        results = None
        
        if dict_type == "shared" and shared_dict_id:
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM shared_dict_{shared_dict_id} sd
            JOIN words w ON sd.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª—ñ–≤ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –Ω—å–æ–≥–æ
                query = f"""
                SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
                FROM shared_dict_{shared_dict_id} sd
                JOIN words w ON sd.word_id = w.id
                JOIN article a ON w.article_id = a.id
                WHERE w.article_id != 4 AND w.article_id IS NOT NULL
                ORDER BY RANDOM()
                LIMIT 20
                """
                cursor.execute(query)
                results = cursor.fetchall()
            
        elif dict_type == "common":
            # –î–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation
            FROM words w
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition}
            ORDER BY RANDOM()
            LIMIT 20
            """
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                query = query.replace(exclude_condition, "")
                cursor.execute(query)
                results = cursor.fetchall()
        
        else:
            # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ dict_type –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ "personal" –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            dict_type = "personal"
            if chat_id in user_state:
                user_state[chat_id]["dict_type"] = "personal"
                
            # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–ª–æ–≤–∞ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (5.0) –¥–ª—è –Ω–µ-—Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
            level = user_state.get(chat_id, {}).get("level", "easy")
            
            # –Ø–∫—â–æ —Ü–µ –Ω–µ —Å–∫–ª–∞–¥–Ω–∏–π —Ä—ñ–≤–µ–Ω—å, –æ–±–º–µ–∂—É—î–º–æ –ø–æ–∫–∞–∑ —Å–ª—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            exclude_max_rating_words = level != "hard"
            
            exclude_condition = f"AND w.id != {last_word_id}" if last_word_id else ""
            max_rating_filter = " AND u.rating < 4.9" if exclude_max_rating_words else ""
            
            query = f"""
            SELECT w.id, w.word, a.article, a.id as article_id, w.{language}_tran as translation, u.rating
            FROM user_{chat_id} u
            JOIN words w ON u.word_id = w.id
            JOIN article a ON w.article_id = a.id
            WHERE w.article_id != 4 AND w.article_id IS NOT NULL
            {exclude_condition} {max_rating_filter}
            ORDER BY u.rating ASC
            LIMIT 15
            """
            
            cursor.execute(query)
            results = cursor.fetchall()
            
            if not results:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–ª—å—Ç—Ä—É, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                if exclude_max_rating_words:
                    query = query.replace(" AND u.rating < 4.9", "")
                    cursor.execute(query)
                    results = cursor.fetchall()
        
        conn.close()
        
        if not results:
            from dictionary import return_to_appropriate_menu
            bot.send_message(chat_id, "üì≠ –£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return_to_appropriate_menu(chat_id, False, "–£ —Å–ª–æ–≤–Ω–∏–∫—É –Ω–µ–º–∞—î —Å–ª—ñ–≤ –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è.")
            return False
            
        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ —Å–ª–æ–≤–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        import random
        result = random.choice(results)
        print(f"Debug: Selected result: {result}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å–ª–æ–≤–∞, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏, —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ –º–∞—Ç–∏ —Ä—ñ–∑–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–ª—ñ–≤
        if dict_type == "personal":
            # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ—Å—Ç–∏—Ç—å 6 –ø–æ–ª—ñ–≤ (–≤–∫–ª—é—á–Ω–æ –∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–º)
            if len(result) >= 6:
                word_id, word, correct_article, article_id, translation, _ = result
            else:
                # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –∑–∞–ø–∏—Ç –ø–æ–≤–µ—Ä–Ω—É–≤ –º–µ–Ω—à–µ –ø–æ–ª—ñ–≤
                word_id, word, correct_article, article_id, translation = result[:5]
        else:
            # –î–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ –∞–±–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ—Å—Ç–∏—Ç—å 5 –ø–æ–ª—ñ–≤
            if len(result) >= 5:
                word_id, word, correct_article, article_id, translation = result[:5]
            else:
                # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫
                print(f"Warning: Unexpected result format: {result}")
                raise ValueError(f"Unexpected result format: got {len(result)} values, expected at least 5")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–æ–≤–∞, —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É
        user_state[chat_id] = {
            "word_id": word_id,
            "word": word,
            "correct_article": correct_article,
            "dict_type": dict_type,
            "level": "easy",
            "translation": translation,
            "last_article_word_id": word_id  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        }
        
        if shared_dict_id:
            user_state[chat_id]["shared_dict_id"] = shared_dict_id
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∞—Ä—Ç–∏–∫–ª—è–º–∏
        markup = telebot.types.InlineKeyboardMarkup(row_width=3)
        markup.add(
            telebot.types.InlineKeyboardButton("der", callback_data=f"art_der_{word_id}"),
            telebot.types.InlineKeyboardButton("die", callback_data=f"art_die_{word_id}"),
            telebot.types.InlineKeyboardButton("das", callback_data=f"art_das_{word_id}")
        )
        
        sent_message = bot.send_message(
            chat_id,
            f"üè∑Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä—Ç–∏–∫–ª—å –¥–ª—è —Å–ª–æ–≤–∞:\n\n<b>{word}</b>\n\n<i>–ü–µ—Ä–µ–∫–ª–∞–¥: {translation}</i>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        user_state[chat_id]["message_id"] = sent_message.message_id
        return True
        
    except Exception as e:
        print(f"Error in start_article_activity: {e}")
        import traceback
        traceback.print_exc()
        bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏–≤—á–µ–Ω–Ω—è –∞—Ä—Ç–∏–∫–ª—ñ–≤.")
        return False

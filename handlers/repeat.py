# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–ª—ñ–≤.
"""

from config import bot, user_state
from storage import get_dataframe, save_dataframe, get_user_file_path
from dictionary import start_activity

@bot.message_handler(func=lambda message: message.text == "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏")
def repeat_words(message):
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
    level = user_state.get(chat_id, {}).get("level", "easy")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –Ω–∞ –ø–æ–∫–∞–∑ —Å–ª—ñ–≤ –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –¥–ª—è –Ω–µ-—Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    start_activity(message.chat.id, 'repeat', exclude_max_rating=(level != "hard"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state:
        bot.answer_callback_query(call.id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏'")
        return
    
    _, word, selected_tr = call.data.split('_')
    correct_tr = user_state[chat_id]["current_word"]['translation']
    
    df = get_dataframe(chat_id)
    if selected_tr == correct_tr:
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        df.loc[df['word'] == word, 'priority'] -= 0.001
        bot.delete_message(chat_id, call.message.message_id)
        repeat_words(call.message)
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tr}")
        df.loc[df['word'] == word, 'priority'] += 0.001
        markup = call.message.reply_markup
        for row in markup.keyboard:
            if row[0].callback_data == call.data:
                row[0].text += " ‚ùå"
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
    
    file_path, lang = get_user_file_path(chat_id) if user_state[chat_id].get("dict_type") == "personal" else (None, None)
    save_dataframe(chat_id, df, lang if lang else "common")

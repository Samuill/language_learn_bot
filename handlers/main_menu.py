# -*- coding: utf-8 -*-

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –±–∞–∑–æ–≤–æ—ó –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.
"""

import pandas as pd
from config import bot, user_state
from utils import clear_state, track_activity, main_menu_keyboard, language_selection_keyboard, main_menu_cancel
from storage import get_user_file_path, save_dataframe

@bot.message_handler(commands=["start"])
def main_menu(message):
    """Show main menu or language selection"""
    clear_state(message.chat.id)
    file_path, language = get_user_file_path(message.chat.id)
    track_activity(message.chat.id)
    
    if not file_path:
        # If file doesn't exist, offer language selection
        bot.send_message(message.chat.id, "üåç –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É, –Ω–∞ —è–∫—ñ–π –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ —Å–ª—ñ–≤:", 
                         reply_markup=language_selection_keyboard())
        user_state[message.chat.id] = {"step": "language_selection"}
    else:
        # If file exists, show main menu
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", 
                         reply_markup=main_menu_keyboard(message.chat.id))

@bot.message_handler(func=lambda message: message.text in ["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†–æ—Å—ñ–π—Å—å–∫–∞"])
def handle_language_selection(message):
    """Handle language selection"""
    chat_id = message.chat.id
    if user_state.get(chat_id, {}).get("step") == "language_selection":
        language = "uk" if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else "ru"
        
        # Create empty dictionary for user
        df = pd.DataFrame(columns=["word", "translation", "priority"])
        save_dataframe(chat_id, df, language)
        
        bot.send_message(chat_id, f"‚úÖ –ú–æ–≤—É –ø–µ—Ä–µ–∫–ª–∞–¥—É –æ–±—Ä–∞–Ω–æ: {message.text}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —Ç–∞ –≤–∏–≤—á–∞—Ç–∏ —ó—Ö.", 
                         reply_markup=main_menu_keyboard(chat_id))
        clear_state(chat_id)

@bot.message_handler(func=lambda message: message.text in ["‚úñÔ∏è –í—ñ–¥–º—ñ–Ω–∞", "–í—ñ–¥–º—ñ–Ω–∞"])
def cancel_action(message):
    """Cancel current action and return to main menu"""
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "üö´ –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_keyboard(chat_id))

@bot.message_handler(func=lambda message: message.text == "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
def return_to_main_menu(message):
    """Return to main menu"""
    chat_id = message.chat.id
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–ø —Å–ª–æ–≤–Ω–∏–∫–∞, –∞–ª–µ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    clear_state(chat_id, preserve_dict_type=True, preserve_messages=False)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    bot.send_message(chat_id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", 
                   reply_markup=main_menu_keyboard(chat_id))
